{"version":3,"sources":["Assets/banner.jpg","methods/UserSave.js","components/UserCreate.js","methods/Account.js","components/LoginPage.js","methods/GetUsers.js","store.js","components/UserEdit.js","methods/CreateDoc.js","components/UserTable.js","methods/DynamicForms.js","methods/Logout.js","Pages/FormList.js","Pages/DynamicLoginPage.js","Pages/CreateAdmin.js","Pages/FormCreate.js","Pages/FormTable.js","Pages/FormEdit.js","Pages/FormView.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","HTTP","axios","create","baseURL","process","REACT_APP_API_URL","UserSave","_ref","Object","asyncToGenerator","_regeneratorRuntime","mark","_callee","body","wrap","_context","prev","next","post","then","response","console","log","catch","error","stop","_x","apply","this","arguments","UserCreate","_useState","useState","_useState2","slicedToArray","isLoading","setLoading","SUPPORTED_FORMATS","useEffect","document","title","formik","useFormik","initialValues","fullname","email","file","firstJobDay","totalWorkTime","department","workTitle","university","graduationTime","previousJob","previousWorkTitle","skills","description","validationSchema","Yup","required","test","value","size","includes","type","min","onSubmit","values","resetForm","formData","FormData","keys","forEach","key","append","toast","success","setTimeout","react_default","a","createElement","className","style","textAlign","react_router_dom","to","handleSubmit","encType","htmlFor","id","onBlur","handleBlur","placeholder","name","onChange","handleChange","touched","errors","e","setFieldValue","target","files","map","item","previousJobTitle","rows","role","aria-hidden","require","Login","username","password","Promise","resolve","reject","res","err","isExpired","token","localStorage","getItem","data","getRole","LoginPage","navigate","useNavigate","setItem","autoClose","background","class","GetUsers","GetUsers_regeneratorRuntime","abrupt","get","headers","x-access-token","GetUserDetails","_ref2","_callee2","_context2","UpdateUser","_ref4","_callee4","_context4","put","_x2","DeleteUsersByIds","_ref5","_callee5","ids","payload","_context5","delete","_x3","useStore","set","colors","HEX","color","fieldTypes","typeName","isUpdated","toggleUpdate","state","UserEdit","props","urlToObject","UserEdit_regeneratorRuntime","image","blob","fetch","sent","File","substring","_onSubmit","form_data","t0","t1","call","_id","finally","backgroundColor","for","index","assign","src","concat","generateDoc","CreateDoc_regeneratorRuntime","rowData","objArr","obj","awaitBanner","bannerImage","borders","aylar","i","jobDayParse","jobDaySet","jobDayBirlestir","imageBlob","section","doc","banner","top","BorderStyle","NONE","bottom","left","right","1","2","3","4","5","6","7","8","9","10","11","12","length","parseInt","SectionType","NEXT_PAGE","page","orientation","PageOrientation","LANDSCAPE","height","convertMillimetersToTwip","width","Paragraph","t2","ImageRun","t3","t4","t5","horizontalPosition","offset","verticalPosition","t6","transformation","floating","t7","t8","TextRun","text","break","t9","t10","children","t11","t12","Table","t13","t14","TableRow","t15","TableCell","t16","t17","WidthType","PERCENTAGE","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","verticalAlign","VerticalAlign","CENTER","bold","font","t31","t32","t33","t34","t35","t36","t37","properties","push","Document","sections","Packer","toBlob","saveAs","MyNewTitle","_ref$text","_ref$variant","variant","Typography","whiteSpace","overflow","textOverflow","fontSize","DeleteActionIcon","Delete_default","GetAppActionIcon","GetApp_default","AddActionIcon","AddBoxRounded_default","htmlColor","KeyboardRightActionIcon","KeyboardArrowRight_default","KeyboardDownActionIcon","KeyboardArrowDown_default","UserTable","store","tableIcons","Add","forwardRef","ref","AddBox_default","Check","Check_default","Clear","Clear_default","Delete","DeleteOutline_default","DetailPanel","ChevronRight_default","Edit","Edit_default","Export","SaveAlt_default","Filter","FilterList_default","FirstPage","FirstPage_default","LastPage","LastPage_default","NextPage","PreviousPage","ChevronLeft_default","ResetSearch","Search","Search_default","SortArrow","ArrowDownward_default","ThirdStateCheck","Remove_default","ViewColumn","ViewColumn_default","selectedRows","setSelectedRows","_useState3","_useState4","setData","_useState5","_useState6","columns","field","filtering","searchable","render","borderRadius","position","alt","sorting","dist_default","icons","UserTable_MyNewTitle","localization","emptyDataSourceMessage","onSelectionChange","actions","icon","tooltip","onClick","deletedCount","event","isFreeAction","detailPanel","openIcon","components_UserEdit","components","Toolbar","dist","options","search","searchFieldAlignment","searchFieldVariant","paging","actionsColumnIndex","exportAllData","showTextRowsSelected","showSelectAllCheckbox","selection","addRowPosition","rowStyle","x","tableData","UpdateForm","GetAvailableForms","GetFormDetails","formId","Logout","removeItem","AdminPanel","userDetail","setUserDetail","setSearch","_useState7","_useState8","setIsLoading","CrudTools","permission","Tooltip","RemoveRedEyeSharp_default","marginRight","marginLeft","DynamicFeedRounded_default","esm_Edit","DeleteForms","esm_Delete","Swal","fire","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","result","isConfirmed","form_ids","DeleteFormsByIds","textTransform","AddCircleSharp_default","logout","ExitToApp_default","filter","form","formName","toLowerCase","primaryColor","allowedForms","permissionType","DynamicLoginPage","CreateAdmin","forms","setForms","toggleLoading","formPermission","setFormPermission","setUsername","_useState9","_useState10","setPassword","_useState11","_useState12","_useState13","_useState14","inputType","setInputType","_useState15","_useState16","selectedForm","setSelectedForm","CreateAdminAccount","preventDefault","roleResponse","aria-pressed","ArrowBack","toConsumableArray","uuid","show","border","find","updatedPermissions","checked","handlePermissionValueParent","selected","disabled","float","formDetails","entries","detail","indexOf","removePermission","FormCreate","formFields","setFormFields","setFormName","selectedColor","setSelectedColor","setFile","formDescription","setFormDescription","status","message","setErrors","handleInputChange","updatedFormFields","clearDynamicErrors","minError","maxError","clearNormalErrors","errorField","submitForm","isValid","updatedErrors","fieldName","fieldNameError","typeError","max","checkValidation","formFieldDetails","fieldNameCamelCased","camelcase","htmlLabel","htmlType","formStructure","JSON","stringify","CreateForm","placeholderType","isMinMaxDisabled","transition","Tooltip_Tooltip","esm_ArrowBack","noValidate","TextField","sx","label","helperText","FormControl","display","InputLabel","Select","SelectDisplayProps","alignItems","justifyContent","labelId","input","OutlinedInput","defaultValue","MenuItem","justifySelf","FormHelperText","Button","component","hidden","multiline","maxRows","IconButton","InputProps","inputProps","FormGroup","FormControlLabel","control","Checkbox","deleteFormField","DeleteOutlined","FormTable","useParams","documents","setDocuments","setFormDetails","selectionModel","setSelectionModel","isEditEnabled","setEditEnabled","getElementById","href","details","headerName","editable","DataGrid","getRowId","row","autoHeight","checkboxSelection","aria-label","hideFooterPagination","editMode","isCellEditable","onRowEditStop","params","objectSpread","document_id","form_id","isAllowed","GridToolbarContainer","EditOff","documentIds","document_ids","DeleteFormDocuments","onSelectionModelChange","newSelectionModel","FormEdit","iconURL","setIconURL","FormEdit_regeneratorRuntime","formDetail","findIndex","updateForm","FormView","formInfo","setFormInfo","formLabels","setFormLabels","setValues","padding","updatedValues","App","react_toastify_esm","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","react_router","path","element","components_UserCreate","components_LoginPage","components_UserTable","Pages_DynamicLoginPage","Pages_CreateAdmin","Pages_FormCreate","FormList","Pages_FormTable","Pages_FormEdit","Pages_FormView","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.7f90fe60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.fa94a8dd.jpg\";","import axios from 'axios'\r\n\r\nconst HTTP = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL,\r\n})\r\n\r\nconst UserSave = async (body) => {\r\n    await HTTP.post('/api/user', body)\r\n        .then((response) => console.log(response))\r\n        .catch((error) => console.log(error))\r\n}\r\nexport default UserSave\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../UserCreate.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { toast } from 'react-toastify'\r\nimport UserSave from '../methods/UserSave'\r\n\r\nconst UserCreate = () => {\r\n    const [isLoading, setLoading] = useState(false)\r\n    const FILE_SIZE = 1024 * 1024\r\n    const SUPPORTED_FORMATS = ['image/jpg', 'image/jpeg', 'image/png']\r\n\r\n    const titles = [\r\n        'Software Engineer',\r\n        'DevOps Engineer',\r\n        'IT System Admin Engineer',\r\n        'Test Automation Engineer',\r\n        'Product Support Engineer',\r\n        'Backend Developer',\r\n        'Frontend Developer',\r\n        'Software Developer',\r\n        'Fullstack Developer',\r\n        'Intern',\r\n        'Other',\r\n    ]\r\n\r\n    useEffect(() => {\r\n        document.title = 'Welcome Onboard'\r\n    }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullname: '',\r\n            email: '',\r\n            file: '',\r\n            firstJobDay: '',\r\n            totalWorkTime: '',\r\n            department: '',\r\n            workTitle: '',\r\n            university: '',\r\n            graduationTime: '',\r\n            previousJob: '',\r\n            previousWorkTitle: '',\r\n            skills: '',\r\n            description: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            fullname: Yup.string().required('Name and surname is a required field'),\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is a required field'),\r\n            firstJobDay: Yup.date().required('Orion start day is a required field'),\r\n            file: Yup.mixed()\r\n                .required('Image is a required field')\r\n                .test(\r\n                    'fileSize',\r\n                    'Image too large. (max: 1024 x 1024)',\r\n                    (value) => value && value.size <= FILE_SIZE\r\n                )\r\n                .test(\r\n                    'fileFormat',\r\n                    'Unsupported Format. (sup: .jpg .png)',\r\n                    (value) => value && SUPPORTED_FORMATS.includes(value.type)\r\n                ),\r\n            university: Yup.string().required('University is a required field'),\r\n            workTitle: Yup.string().required('Position is a required field'),\r\n            department: Yup.string().required('Orion department is a required field'),\r\n            graduationTime: Yup.date().required('Graduation is a required field'),\r\n            skills: Yup.string()\r\n                .min(20, 'Skills must be at least 20 characters')\r\n                .required('Technical skills is a required field'),\r\n            description: Yup.string()\r\n                .min(150, 'About must be at least 150 characters')\r\n                .required('About is a required field'),\r\n        }),\r\n        onSubmit: (values, { resetForm }) => {\r\n            setLoading(true)\r\n            const formData = new FormData()\r\n            Object.keys(values).forEach((key) => {\r\n                formData.append(key, values[key])\r\n            })\r\n            UserSave(formData)\r\n                .then(() => {\r\n                    toast.success('User Submitted!')\r\n                    setLoading(false)\r\n                    setTimeout(() => {\r\n                        resetForm()\r\n                    }, 2000)\r\n                })\r\n                .catch((error) => {\r\n                    toast.error('Submit Failed!')\r\n                    console.log(error)\r\n                })\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"form-holder\">\r\n                        <div className=\"form-content\">\r\n                            <div className=\"form-items\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group col-md-3\">\r\n                                        <h3>Welcome</h3>\r\n                                        <p>TELL US ABOUT YOURSELF</p>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ textAlign: 'right' }}\r\n                                        className=\"form-group col-md-9\"\r\n                                    >\r\n                                        <Link to=\"/users\" className=\"btn btn-primary\">\r\n                                            Admin Panel\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                <form onSubmit={formik.handleSubmit} encType=\"multipart/form-data\">\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group col-md-4 col-sm-12\">\r\n                                            <label htmlFor=\"fullname\">Full Name</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"fullname\"\r\n                                                onBlur={formik.handleBlur}\r\n                                                placeholder=\"Name Surname\"\r\n                                                name=\"fullname\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.fullname}\r\n                                            />\r\n                                            {formik.touched.fullname && formik.errors.fullname ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.fullname}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <div className=\"form-group col-md-4 col-sm-12\">\r\n                                            <label htmlFor=\"email\">Email</label>\r\n                                            <input\r\n                                                type=\"email\"\r\n                                                className=\"form-control\"\r\n                                                id=\"email\"\r\n                                                onBlur={formik.handleBlur}\r\n                                                name=\"email\"\r\n                                                placeholder=\"name@example.com\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.email}\r\n                                            />\r\n                                            {formik.touched.email && formik.errors.email ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.email}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <div className=\"form-group col-md-4 col-sm-12\">\r\n                                            <div className=\"form-group\">\r\n                                                <label className=\"mb-1\" htmlFor=\"file\">\r\n                                                    Photo\r\n                                                </label>\r\n                                                <input\r\n                                                    type=\"file\"\r\n                                                    className=\"form-control\"\r\n                                                    id=\"file\"\r\n                                                    name=\"file\"\r\n                                                    onChange={(e) => {\r\n                                                        formik.setFieldValue(\r\n                                                            'file',\r\n                                                            e.target.files[0]\r\n                                                        )\r\n                                                    }}\r\n                                                />\r\n                                                {formik.touched.file && formik.errors.file ? (\r\n                                                    <p className=\"formikValidate\">\r\n                                                        {formik.errors.file}\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                                            <label className=\"mb-2\" htmlFor=\"FirstJobDay\">\r\n                                                Orion Start Day\r\n                                            </label>\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"date\"\r\n                                                    className=\"form-control\"\r\n                                                    id=\"FirstJobDay\"\r\n                                                    onBlur={formik.handleBlur}\r\n                                                    name=\"firstJobDay\"\r\n                                                    onChange={formik.handleChange}\r\n                                                    value={formik.values.firstJobDay}\r\n                                                />\r\n                                                {formik.touched.firstJobDay &&\r\n                                                formik.errors.firstJobDay ? (\r\n                                                    <p className=\"formikValidate\">\r\n                                                        {formik.errors.firstJobDay}\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                                            <label htmlFor=\"FirstJobDay\">Position</label>\r\n                                            <select\r\n                                                onChange={formik.handleChange}\r\n                                                name=\"workTitle\"\r\n                                                id=\"FirstJobDay\"\r\n                                                className=\"form-select\"\r\n                                            >\r\n                                                <option value={formik.values.workTitle}>\r\n                                                    Open this select menu\r\n                                                </option>\r\n                                                {titles.map((item) => {\r\n                                                    return (\r\n                                                        <option key={item} value={item}>\r\n                                                            {item}\r\n                                                        </option>\r\n                                                    )\r\n                                                })}\r\n                                            </select>\r\n                                            {formik.touched.workTitle && formik.errors.workTitle ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.workTitle}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"department\">Department</label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    onBlur={formik.handleBlur}\r\n                                                    id=\"department\"\r\n                                                    placeholder=\"ex: NRD2208\"\r\n                                                    name=\"department\"\r\n                                                    onChange={formik.handleChange}\r\n                                                    value={formik.values.department}\r\n                                                />\r\n                                                {formik.touched.department &&\r\n                                                formik.errors.department ? (\r\n                                                    <p className=\"formikValidate\">\r\n                                                        {formik.errors.department}\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group mt-1 col-md-8 col-sm-12\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"university\">University</label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    onBlur={formik.handleBlur}\r\n                                                    id=\"university\"\r\n                                                    placeholder=\"ex: Corban University\"\r\n                                                    name=\"university\"\r\n                                                    onChange={formik.handleChange}\r\n                                                    value={formik.values.university}\r\n                                                />\r\n                                                {formik.touched.university &&\r\n                                                formik.errors.university ? (\r\n                                                    <p className=\"formikValidate\">\r\n                                                        {formik.errors.university}\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                                            <label className=\"mb-2\" htmlFor=\"GraduationTime\">\r\n                                                Graduation\r\n                                            </label>\r\n                                            <div className=\"form-group\">\r\n                                                <input\r\n                                                    type=\"month\"\r\n                                                    className=\"form-control\"\r\n                                                    id=\"GraduationTime\"\r\n                                                    onBlur={formik.handleBlur}\r\n                                                    name=\"graduationTime\"\r\n                                                    onChange={formik.handleChange}\r\n                                                    value={formik.values.graduationTime}\r\n                                                />\r\n                                                {formik.touched.graduationTime &&\r\n                                                formik.errors.graduationTime ? (\r\n                                                    <p className=\"formikValidate\">\r\n                                                        {formik.errors.graduationTime}\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                                            <label htmlFor=\"PreviousJob\">Previous Job</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"PreviousJob\"\r\n                                                name=\"previousJob\"\r\n                                                placeholder=\"ex: Corporate consulting\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.previousJob}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                                            <label htmlFor=\"previousWorkTitle\">\r\n                                                Previous Position\r\n                                            </label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"previousWorkTitle\"\r\n                                                name=\"previousWorkTitle\"\r\n                                                placeholder=\"ex: Backend Developer\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.previousJobTitle}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"TotalWorkTime\">\r\n                                                    Total Experience\r\n                                                </label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    id=\"TotalWorkTime\"\r\n                                                    name=\"totalWorkTime\"\r\n                                                    placeholder=\"ex: 2 years \"\r\n                                                    onChange={formik.handleChange}\r\n                                                    value={formik.values.totalWorkTime}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group mt-1 col-md-12 col-sm-12\">\r\n                                            <label htmlFor=\"Skills\">Technical Skills</label>\r\n                                            <textarea\r\n                                                className=\"form-control mt-2\"\r\n                                                id=\"Skills\"\r\n                                                name=\"skills\"\r\n                                                placeholder=\" ex: PHP, Vue.js, AWS..\"\r\n                                                onBlur={formik.handleBlur}\r\n                                                rows=\"3\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.skills}\r\n                                            />\r\n                                            {formik.touched.skills && formik.errors.skills ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.skills}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group mt-1 col-md-12 col-sm-12\">\r\n                                            <label htmlFor=\"Description\">About</label>\r\n                                            <textarea\r\n                                                className=\"form-control mt-2\"\r\n                                                name=\"description\"\r\n                                                onBlur={formik.handleBlur}\r\n                                                id=\"description\"\r\n                                                rows=\"3\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.values.description}\r\n                                            />\r\n                                            {formik.touched.description &&\r\n                                            formik.errors.description ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.description}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ textAlign: 'center' }}\r\n                                        className=\"form-button mt-4\"\r\n                                    >\r\n                                        {!isLoading ? (\r\n                                            <button\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn btn-primary\"\r\n                                            >\r\n                                                Submit\r\n                                            </button>\r\n                                        ) : (\r\n                                            <button\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn btn-primary\"\r\n                                            >\r\n                                                <span\r\n                                                    className=\"spinner-border spinner-border-sm\"\r\n                                                    role=\"status\"\r\n                                                    aria-hidden=\"true\"\r\n                                                />\r\n                                            </button>\r\n                                        )}\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCreate\r\n","const axios = require('axios')\r\n\r\nconst HTTP = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL,\r\n})\r\n\r\nexport const Login = (username, password) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post('/api/account/login', { username, password })\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport const RegisterAsAdmin = (data) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post('/api/account/register-as-admin', data, {\r\n            headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n        })\r\n            .then((res) => resolve(res))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n\r\nexport const isExpired = () => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post('/api/account/is-expired', { token: localStorage.getItem('jwt') })\r\n            .then((res) => {\r\n                resolve(res.data)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n\r\nexport const getRole = () => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post('/api/account/get-role', { token: localStorage.getItem('jwt') })\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => {\r\n                console.log(err)\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../UserCreate.css'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { toast } from 'react-toastify'\r\nimport { isExpired, Login } from '../methods/Account'\r\n\r\nconst LoginPage = () => {\r\n    const [isLoading, setLoading] = useState(false)\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        isExpired().then((res) => {\r\n            if (!res) {\r\n                navigate('/users')\r\n            }\r\n        })\r\n    }, [navigate])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n            password: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            username: Yup.string().required('Username is required'),\r\n            password: Yup.string().required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            setLoading(true)\r\n            Login(values.username, values.password)\r\n                .then((res) => {\r\n                    if (res.data.token) {\r\n                        setLoading(false)\r\n                        localStorage.setItem('jwt', res.data.token)\r\n                        navigate('/users')\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    setLoading(false)\r\n                    toast.error('Login failed! Wrong username or password.', { autoClose: 2000 })\r\n                    console.log(err)\r\n                })\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"form-holder\">\r\n                        <div className=\"form-content\">\r\n                            <div className=\"form-items login\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group col-md-9\">\r\n                                        <h3>LOG IN</h3>\r\n                                        <p>ACCESSING THE USER LIST</p>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ textAlign: 'right' }}\r\n                                        className=\"form-group col-md-3\"\r\n                                    >\r\n                                        <Link\r\n                                            to=\"/\"\r\n                                            style={{ background: '#495056' }}\r\n                                            class=\"btn btn-primary\"\r\n                                        >\r\n                                            Back\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                <form onSubmit={formik.handleSubmit} encType=\"\">\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group col-md-12\">\r\n                                            <label htmlFor=\"name\">Username</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"name\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.username}\r\n                                                name=\"username\"\r\n                                            />\r\n                                            {formik.errors.username && formik.errors.username ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.username}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <div className=\"form-group mt-4 col-md-12\">\r\n                                            <label htmlFor=\"Surname\">Password</label>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                className=\"form-control\"\r\n                                                id=\"surname\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.password}\r\n                                                name=\"password\"\r\n                                            />\r\n                                            {formik.touched.password && formik.errors.password ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.password}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ textAlign: 'center' }}\r\n                                        className=\"form-button mt-3\"\r\n                                    >\r\n                                        {!isLoading ? (\r\n                                            <button\r\n                                                style={{ background: 'coral ' }}\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn btn-primary\"\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        ) : (\r\n                                            <button\r\n                                                style={{ background: 'coral ' }}\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn btn-primary\"\r\n                                            >\r\n                                                <span\r\n                                                    className=\"spinner-border spinner-border-sm\"\r\n                                                    role=\"status\"\r\n                                                    aria-hidden=\"true\"\r\n                                                />\r\n                                            </button>\r\n                                        )}\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage\r\n","import axios from 'axios'\r\n\r\nconst HTTP = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL,\r\n})\r\n\r\nexport const GetUsers = async () => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.get('/api/user', { headers: { 'x-access-token': localStorage.getItem('jwt') } })\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => reject(error))\r\n    })\r\n}\r\n\r\nexport const GetUserDetails = async () => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.get('/api/account/get-admin-details', {\r\n            headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n        })\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => reject(error))\r\n    })\r\n}\r\n\r\nexport const GetUserById = async (id) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.get('/api/user/get-user-by-id', {\r\n            params: { id },\r\n            headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n        })\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport const UpdateUser = async (body) => {\r\n    await HTTP.put('/api/user', body, {\r\n        headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n    })\r\n\r\n        .then((response) => console.log(response))\r\n        .catch((error) => console.log(error))\r\n}\r\n\r\nexport const DeleteUsersByIds = async (ids) => {\r\n    const payload = {\r\n        ids,\r\n        token: localStorage.getItem('jwt'),\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.delete('/api/user/delete-multiple', { data: payload })\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n","import create from 'zustand'\r\n\r\nconst useStore = create((set) => ({\r\n    colors: [\r\n        {\r\n            HEX: '#FF2D55',\r\n            color: 'Red Pink',\r\n        },\r\n        {\r\n            HEX: '#5856D6',\r\n            color: 'Warm Blue',\r\n        },\r\n        {\r\n            HEX: '#FF9500',\r\n            color: 'Dark Orange',\r\n        },\r\n        {\r\n            HEX: '#FFCC00',\r\n            color: 'Supernova',\r\n        },\r\n        {\r\n            HEX: '#FF3B30',\r\n            color: 'Red Orange',\r\n        },\r\n        {\r\n            HEX: '#5AC8FA',\r\n            color: 'Malibu',\r\n        },\r\n        {\r\n            HEX: '#007AFF',\r\n            color: 'Deep Sky Blue',\r\n        },\r\n        {\r\n            HEX: '#4CD964',\r\n            color: 'Fresh Green',\r\n        },\r\n    ],\r\n    fieldTypes: [\r\n        { typeName: 'Metin', type: 'String' },\r\n        { typeName: 'Tarih', type: 'Date' },\r\n        { typeName: 'Sayı', type: 'Number' },\r\n        { typeName: 'E-mail', type: 'String' },\r\n    ],\r\n    isUpdated: false,\r\n    toggleUpdate: () => set((state) => ({ isUpdated: !state.isUpdated })),\r\n}))\r\n\r\nexport default useStore\r\n","import React from 'react' //, { useState, useEffect }\r\nimport '../UserCreate.css'\r\nimport { useState } from 'react'\r\nimport { UpdateUser } from '../methods/GetUsers'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { toast } from 'react-toastify' //, ToastContainer\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport useStore from '../store'\r\n\r\nconst UserEdit = (props) => {\r\n    const titles = [\r\n        'Software Engineer',\r\n        'DevOps Engineer',\r\n        'IT System Admin Engineer',\r\n        'Test Automation Engineer',\r\n        'Product Support Engineer',\r\n        'Backend Developer',\r\n        'Frontend Developer',\r\n        'Software Developer',\r\n        'Fullstack Developer',\r\n        'Intern',\r\n        'Other',\r\n    ]\r\n\r\n    const store = useStore()\r\n    const toggleUpdate = store.toggleUpdate\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const urlToObject = async (image) => {\r\n        const response = await fetch(process.env.REACT_APP_API_URL + image)\r\n        const blob = await response.blob()\r\n        const file = new File([blob], 'image.jpg', { type: blob.type })\r\n        return file\r\n    }\r\n    //const FILE_SIZE = 1024 * 1024;\r\n    /*const SUPPORTED_FORMATS = [\r\n    \"image/jpg\",\r\n    \"image/jpeg\",\r\n    \"image/png\"\r\n  ]; */\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullname: props.data.fullname,\r\n            email: props.data.email,\r\n            file: '',\r\n            firstJobDay: props.data.firstJobDay ? props.data.firstJobDay.substring(0, 10) : null,\r\n            totalWorkTime: props.data.totalWorkTime ? props.data.totalWorkTime : null,\r\n            university: props.data.university,\r\n            department: props.data.department,\r\n            graduationTime: props.data.graduationTime\r\n                ? props.data.graduationTime.substring(0, 10)\r\n                : null,\r\n            previousJob: props.data.previousJob ? props.data.previousJob : null,\r\n            skills: props.data.skills,\r\n            description: props.data.description,\r\n            previousWorkTitle: props.data.previousWorkTitle ? props.data.previousWorkTitle : null,\r\n            workTitle: props.data.workTitle,\r\n        },\r\n        validationSchema: Yup.object({\r\n            fullname: Yup.string().required('Name and surname is a required field'),\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('Email is a required field'),\r\n            firstJobDay: Yup.date().required('Orion start day is a required field'),\r\n            // file: Yup.mixed()\r\n            //         .NoRequired(\"Image is a required field\")\r\n            //         .test(\r\n            //             \"fileSize\",\r\n            //             \"Image too large. (max: 1024 x 1024)\",\r\n            //             value => value && value.size <= FILE_SIZE\r\n            //         )\r\n            //         .test(\r\n            //             \"fileFormat\",\r\n            //             \"Unsupported Format. (sup: .jpg .png)\",\r\n            //             value => value && SUPPORTED_FORMATS.includes(value.type)\r\n            //         ),\r\n            university: Yup.string().required('University is a required field'),\r\n            department: Yup.string().required('Orion department is a required field'),\r\n            graduationTime: Yup.date().required('Graduation is a required field'),\r\n            skills: Yup.string()\r\n                .min(20, 'Skills must be at least 20 characters')\r\n                .required('Technical skills is a required field'),\r\n            description: Yup.string()\r\n                .min(150, 'About must be at least 150 characters')\r\n                .required('About is a required field'),\r\n        }),\r\n\r\n        onSubmit: async (values) => {\r\n            setLoading(true)\r\n\r\n            var form_data = new FormData()\r\n            for (var key in values) {\r\n                form_data.append(key, values[key])\r\n            }\r\n            if (formik.values.file === '') {\r\n                form_data.append('file', await urlToObject(props.data.image))\r\n            }\r\n            form_data.append('_id', props.data._id)\r\n\r\n            UpdateUser(form_data)\r\n                .then(() => {\r\n                    toast.success('Update Succesful!')\r\n                    toggleUpdate()\r\n                })\r\n                .catch(() => {\r\n                    toast.error('Error! Please try again!')\r\n                })\r\n                .finally(() => {\r\n                    setLoading(false)\r\n                })\r\n        },\r\n    })\r\n    console.log(formik.values)\r\n    return (\r\n        <div className=\"container p-5\" style={{ backgroundColor: '#f2f8fc' }}>\r\n            <div className=\"row\">\r\n                <form onSubmit={formik.handleSubmit} encType=\"multipart/form-data\">\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"form-group col-md-6 col-sm-12\">\r\n                            <label for=\"Surname\">Full Name</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control mt-2\"\r\n                                id=\"fullname\"\r\n                                onBlur={formik.handleBlur}\r\n                                placeholder=\"name surname\"\r\n                                name=\"fullname\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.fullname}\r\n                            />\r\n                            {formik.touched.fullname && formik.errors.fullname ? (\r\n                                <p className=\"formikValidate\">{formik.errors.fullname}</p>\r\n                            ) : null}\r\n                        </div>\r\n                        <div className=\"form-group col-md-6 col-sm-12\">\r\n                            <label for=\"email\">Email</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"form-control mt-2\"\r\n                                id=\"email\"\r\n                                onBlur={formik.handleBlur}\r\n                                name=\"email\"\r\n                                placeholder=\"name@example.com\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.email}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <p className=\"formikValidate\">{formik.errors.email}</p>\r\n                            ) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"form-group col-md-4 col-sm-12\">\r\n                            <label className=\"mb-2\" for=\"FirstJobDay\">\r\n                                Orion Start Day\r\n                            </label>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    type=\"date\"\r\n                                    className=\"form-control\"\r\n                                    id=\"FirstJobDay\"\r\n                                    onBlur={formik.handleBlur}\r\n                                    name=\"firstJobDay\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.firstJobDay}\r\n                                />\r\n                                {formik.touched.firstJobDay && formik.errors.firstJobDay ? (\r\n                                    <p className=\"formikValidate\">{formik.errors.firstJobDay}</p>\r\n                                ) : null}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group col-md-4 col-sm-12\">\r\n                            <label for=\"FirstJobDay\">Position</label>\r\n                            <select\r\n                                onChange={formik.handleChange}\r\n                                name=\"workTitle\"\r\n                                class=\"form-select mt-2\"\r\n                                value={formik.values.workTitle}\r\n                            >\r\n                                {titles.map((item, index) => {\r\n                                    return (\r\n                                        <option\r\n                                            {...(props.data.workTitle == item ? 'selected' : null)}\r\n                                            value={item}\r\n                                        >\r\n                                            {item}\r\n                                        </option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group col-md-4 col-sm-12\">\r\n                            <div className=\"form-group\">\r\n                                <label for=\"university\">Department</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control mt-2\"\r\n                                    onBlur={formik.handleBlur}\r\n                                    id=\"department\"\r\n                                    placeholder=\"ex: NRD 2208\"\r\n                                    name=\"department\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.department}\r\n                                />\r\n                                {formik.touched.department && formik.errors.department ? (\r\n                                    <p className=\"formikValidate\">{formik.errors.department}</p>\r\n                                ) : null}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"form-group mt-2 col-md-2\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"mb-3\" for=\"file\">\r\n                                    Current Photo\r\n                                </label>\r\n                                <div className=\"currentPhoto\">\r\n                                    <img\r\n                                        className=\"currentPhotoImg\"\r\n                                        src={`${process.env.REACT_APP_API_URL}${props.data.image}`}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mt-5 col-md-10\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"mb-3\" for=\"file\">\r\n                                    Click to update photo\r\n                                </label>\r\n                                <input\r\n                                    type=\"file\"\r\n                                    className=\"form-control\"\r\n                                    id=\"file\"\r\n                                    name=\"file\"\r\n                                    onChange={(e) => {\r\n                                        formik.setFieldValue('file', e.target.files[0])\r\n                                    }}\r\n                                />\r\n                                {/* {formik.errors.file ? <p className=\"formikValidate\">{formik.errors.file}</p> : null} */}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"form-group mt-1 col-md-9 col-sm-12\">\r\n                            <div className=\"form-group\">\r\n                                <label for=\"university\">University</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control mt-2\"\r\n                                    onBlur={formik.handleBlur}\r\n                                    id=\"university\"\r\n                                    placeholder=\"Corban University\"\r\n                                    name=\"university\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.university}\r\n                                />\r\n                                {formik.touched.university && formik.errors.university ? (\r\n                                    <p className=\"formikValidate\">{formik.errors.university}</p>\r\n                                ) : null}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group mt-1 col-md-3 col-sm-12\">\r\n                            <label className=\"mb-2\" for=\"GraduationTime\">\r\n                                Graduation\r\n                            </label>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    type=\"month\"\r\n                                    className=\"form-control\"\r\n                                    id=\"GraduationTime\"\r\n                                    onBlur={formik.handleBlur}\r\n                                    name=\"graduationTime\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.graduationTime}\r\n                                />\r\n                                {formik.touched.graduationTime && formik.errors.graduationTime ? (\r\n                                    <p className=\"formikValidate\">{formik.errors.graduationTime}</p>\r\n                                ) : null}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                            <label for=\"PreviousJob\">Previous Job</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control mt-2\"\r\n                                id=\"PreviousJob\"\r\n                                onBlur={formik.handleBlur}\r\n                                name=\"previousJob\"\r\n                                placeholder=\"Corporate consulting\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.previousJob}\r\n                            />\r\n                            {formik.touched.previousJob && formik.errors.previousJob ? (\r\n                                <p className=\"formikValidate\">{formik.errors.previousJob}</p>\r\n                            ) : null}\r\n                        </div>\r\n                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                            <label for=\"PreviousJob\">Previous Position</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control mt-2\"\r\n                                id=\"PreviousJob\"\r\n                                name=\"previousJob\"\r\n                                placeholder=\"ex: Backend Developer\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.previousJob}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group mt-1 col-md-4 col-sm-12\">\r\n                            <div className=\"form-group\">\r\n                                <label for=\"TotalWorkTime\">Total Experience</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control mt-2\"\r\n                                    id=\"TotalWorkTime\"\r\n                                    onBlur={formik.handleBlur}\r\n                                    name=\"totalWorkTime\"\r\n                                    placeholder=\"ex: 2 years \"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.totalWorkTime}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"form-group mt-1 col-md-12 col-sm-12\">\r\n                            <label for=\"Skills\">Technical Skills</label>\r\n                            <textarea\r\n                                className=\"form-control mt-2\"\r\n                                id=\"Skills\"\r\n                                name=\"skills\"\r\n                                placeholder=\" ex: PHP, Vue.js, AWS..\"\r\n                                onBlur={formik.handleBlur}\r\n                                rows=\"3\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.skills}\r\n                            ></textarea>\r\n                            {formik.touched.skills && formik.errors.skills ? (\r\n                                <p className=\"formikValidate\">{formik.errors.skills}</p>\r\n                            ) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"form-group mt-1 col-md-12 col-sm-12\">\r\n                            <label for=\"Description\">About</label>\r\n                            <textarea\r\n                                className=\"form-control mt-2\"\r\n                                name=\"description\"\r\n                                onBlur={formik.handleBlur}\r\n                                id=\"description\"\r\n                                rows=\"3\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.description}\r\n                            ></textarea>\r\n                            {formik.touched.description && formik.errors.description ? (\r\n                                <p className=\"formikValidate\">{formik.errors.description}</p>\r\n                            ) : null}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ textAlign: 'center' }} class=\"form-button mt-4\">\r\n                        {!isLoading ? (\r\n                            <button id=\"submit\" type=\"submit\" class=\"btn btn-primary\">\r\n                                Update\r\n                            </button>\r\n                        ) : (\r\n                            <button id=\"submit\" type=\"submit\" class=\"btn btn-primary\">\r\n                                <span\r\n                                    class=\"spinner-border spinner-border-sm\"\r\n                                    role=\"status\"\r\n                                    aria-hidden=\"true\"\r\n                                ></span>\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserEdit\r\n","import {\r\n    Paragraph,\r\n    Document,\r\n    Packer,\r\n    ImageRun,\r\n    Table,\r\n    TableRow,\r\n    TableCell,\r\n    WidthType,\r\n    BorderStyle,\r\n    TextRun,\r\n    VerticalAlign,\r\n    SectionType,\r\n    convertMillimetersToTwip,\r\n    PageOrientation,\r\n} from 'docx'\r\nimport { saveAs } from 'file-saver'\r\nimport banner from '../Assets/banner.jpg'\r\n\r\nconst generateDoc = async (rowData) => {\r\n    const objArr = []\r\n    const obj = {}\r\n\r\n    const awaitBanner = await fetch(banner)\r\n    const bannerImage = awaitBanner.blob()\r\n    const borders = {\r\n        top: {\r\n            style: BorderStyle.NONE,\r\n            size: 1,\r\n        },\r\n        bottom: {\r\n            style: BorderStyle.NONE,\r\n            size: 1,\r\n        },\r\n        left: {\r\n            style: BorderStyle.NONE,\r\n            size: 1,\r\n        },\r\n        right: {\r\n            style: BorderStyle.NONE,\r\n            size: 1,\r\n        },\r\n    }\r\n\r\n    const aylar = [\r\n        { 1: 'Ocak' },\r\n        { 2: 'Şubat' },\r\n        { 3: 'Mart' },\r\n        { 4: 'Nisan' },\r\n        { 5: 'Mayıs' },\r\n        { 6: 'Haziran' },\r\n        { 7: 'Temmuz' },\r\n        { 8: 'Ağustos' },\r\n        { 9: 'Eylül' },\r\n        { 10: 'Ekim' },\r\n        { 11: 'Kasım' },\r\n        { 12: 'Aralık' },\r\n    ]\r\n\r\n    for (let i = 0; i < rowData.length; i++) {\r\n        obj.fullname = rowData[i].fullname\r\n        obj.firstJobDay = rowData[i].firstJobDay\r\n        obj.university = rowData[i].university\r\n        obj.description = rowData[i].description\r\n        obj.image = rowData[i].image\r\n        obj.department = rowData[i].department\r\n        obj.workTitle = rowData[i].workTitle\r\n        const jobDayParse = parseInt(obj.firstJobDay.substring(5, 7), 10)\r\n        const jobDaySet = aylar[jobDayParse - 1][jobDayParse]\r\n        const jobDayBirlestir = `${obj.firstJobDay.substring(\r\n            8,\r\n            10\r\n        )} ${jobDaySet} ${obj.firstJobDay.substring(0, 4)}`\r\n\r\n        // eslint-disable-next-line no-await-in-loop\r\n        const image = await fetch(process.env.REACT_APP_API_URL + obj.image)\r\n        const imageBlob = image.blob()\r\n        const section = {\r\n            properties: {\r\n                type: SectionType.NEXT_PAGE,\r\n                page: {\r\n                    size: {\r\n                        orientation: PageOrientation.LANDSCAPE,\r\n                        height: convertMillimetersToTwip(210),\r\n                        width: convertMillimetersToTwip(200),\r\n                    },\r\n                },\r\n            },\r\n            children: [\r\n                new Paragraph({\r\n                    children: [\r\n                        new ImageRun({\r\n                            // eslint-disable-next-line no-await-in-loop\r\n                            data: await bannerImage,\r\n                            transformation: {\r\n                                width: 795,\r\n                                height: 200,\r\n                            },\r\n\r\n                            floating: {\r\n                                horizontalPosition: {\r\n                                    offset: 1000,\r\n                                },\r\n                                verticalPosition: {\r\n                                    offset: 1000,\r\n                                },\r\n                            },\r\n                        }),\r\n                        new TextRun({\r\n                            text: '',\r\n                            break: 9,\r\n                        }),\r\n                    ],\r\n                }),\r\n                new Table({\r\n                    borders,\r\n                    rows: [\r\n                        new TableRow({\r\n                            children: [\r\n                                new TableCell({\r\n                                    borders,\r\n\r\n                                    width: {\r\n                                        size: 35,\r\n                                        type: WidthType.PERCENTAGE,\r\n                                    },\r\n                                    children: [\r\n                                        new Paragraph({\r\n                                            children: [\r\n                                                new ImageRun({\r\n                                                    // eslint-disable-next-line no-await-in-loop\r\n                                                    data: await imageBlob,\r\n                                                    transformation: {\r\n                                                        width: 165,\r\n                                                        height: 165,\r\n                                                    },\r\n                                                }),\r\n                                            ],\r\n                                        }),\r\n                                    ],\r\n                                }),\r\n                                new TableCell({\r\n                                    borders,\r\n                                    verticalAlign: VerticalAlign.CENTER,\r\n\r\n                                    children: [\r\n                                        new Paragraph({\r\n                                            children: [\r\n                                                new TextRun({\r\n                                                    text: `${obj.fullname}, ${jobDayBirlestir}`,\r\n                                                    bold: true,\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                                new TextRun({\r\n                                                    text: ' tarihi itibariyle ',\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                                new TextRun({\r\n                                                    text: 'Orion Innovation Türkiye ',\r\n                                                    bold: true,\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                                new TextRun({\r\n                                                    text: 'ailesine ',\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                                new TextRun({\r\n                                                    text: obj.workTitle,\r\n                                                    bold: true,\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                                new TextRun({\r\n                                                    text: ' olarak katılmıştır.',\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                            ],\r\n                                        }),\r\n\r\n                                        new Paragraph({\r\n                                            children: [],\r\n                                        }),\r\n\r\n                                        new Paragraph({\r\n                                            children: [\r\n                                                new TextRun({\r\n                                                    text: obj.description,\r\n                                                    size: 22,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                            ],\r\n                                        }),\r\n\r\n                                        new Paragraph({\r\n                                            children: [],\r\n                                        }),\r\n\r\n                                        new Paragraph({\r\n                                            children: [\r\n                                                new TextRun({\r\n                                                    text: `${obj.department} `,\r\n                                                    bold: true,\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                                new TextRun({\r\n                                                    text: `ekibimizde işe başlayan ${obj.fullname}'a 'Orion Innovation Türkiye’ye hoş geldin' der, yeni görevinde başarılar dileriz.`,\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                            ],\r\n                                        }),\r\n                                        new Paragraph({\r\n                                            children: [],\r\n                                        }),\r\n\r\n                                        new Paragraph({\r\n                                            children: [\r\n                                                new TextRun({\r\n                                                    text: 'İnsan Kaynakları Departmanı',\r\n                                                    size: 24,\r\n                                                    font: 'Calibri',\r\n                                                }),\r\n                                            ],\r\n                                        }),\r\n                                    ],\r\n                                }),\r\n                            ],\r\n                        }),\r\n                    ],\r\n                }),\r\n            ],\r\n        }\r\n        objArr.push(section)\r\n    }\r\n\r\n    const doc = new Document({\r\n        sections: objArr,\r\n    })\r\n\r\n    Packer.toBlob(doc).then((blob) => {\r\n        saveAs(blob, 'employees.docx')\r\n        console.log('Document created successfully')\r\n    })\r\n}\r\nexport default generateDoc\r\n","import React, { useEffect, useState, forwardRef } from 'react'\r\nimport MaterialTable, { MTableToolbar } from 'material-table'\r\nimport '../UserCreate.css'\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'\r\nimport Add from '@material-ui/icons/AddBoxRounded'\r\nimport AddBox from '@material-ui/icons/AddBox'\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward'\r\nimport Check from '@material-ui/icons/Check'\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRight from '@material-ui/icons/ChevronRight'\r\nimport Clear from '@material-ui/icons/Clear'\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\r\nimport Edit from '@material-ui/icons/Edit'\r\nimport FilterList from '@material-ui/icons/FilterList'\r\nimport FirstPage from '@material-ui/icons/FirstPage'\r\nimport LastPage from '@material-ui/icons/LastPage'\r\nimport Remove from '@material-ui/icons/Remove'\r\nimport SaveAlt from '@material-ui/icons/SaveAlt'\r\nimport Search from '@material-ui/icons/Search'\r\nimport ViewColumn from '@material-ui/icons/ViewColumn'\r\nimport { Typography } from '@material-ui/core'\r\nimport GetAppIcon from '@material-ui/icons/GetApp'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight'\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport UserEdit from './UserEdit'\r\nimport generateDoc from '../methods/CreateDoc'\r\nimport { DeleteUsersByIds, GetUsers } from '../methods/GetUsers'\r\nimport { isExpired } from '../methods/Account'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport useStore from '../store'\r\n\r\nconst MyNewTitle = ({ text = 'Table Title', variant = 'h6' }) => {\r\n    return (\r\n        <Typography\r\n            variant={variant}\r\n            style={{\r\n                whiteSpace: 'nowrap',\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n                fontSize: '1.75rem',\r\n            }}\r\n        >\r\n            {text}\r\n        </Typography>\r\n    )\r\n}\r\nconst DeleteActionIcon = () => <DeleteIcon />\r\nconst GetAppActionIcon = () => <GetAppIcon />\r\nconst AddActionIcon = () => <Add htmlColor=\"coral\" fontSize=\"large\" />\r\nconst KeyboardRightActionIcon = () => <KeyboardArrowRightIcon />\r\nconst KeyboardDownActionIcon = () => <KeyboardArrowDownIcon />\r\n\r\nconst UserTable = () => {\r\n    const store = useStore()\r\n    const { isUpdated } = store\r\n    const { toggleUpdate } = store\r\n\r\n    const tableIcons = {\r\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n        Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n        Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n        SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n    }\r\n    const [selectedRows, setSelectedRows] = useState([])\r\n    const [data, setData] = useState([])\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [isLoading, setLoading] = useState(true)\r\n    useEffect(() => {\r\n        isExpired().then((res) => {\r\n            if (res) {\r\n                navigate('/login')\r\n            }\r\n        })\r\n        GetUsers().then((response) => {\r\n            setData(response)\r\n            setLoading(false)\r\n        })\r\n    }, [isUpdated, navigate])\r\n\r\n    useEffect(() => {\r\n        document.title = 'Employees Table'\r\n    })\r\n    const columns = [\r\n        {\r\n            width: 20,\r\n            title: ' ',\r\n            field: 'image',\r\n            filtering: false,\r\n            searchable: false,\r\n\r\n            render: (rowData) => (\r\n                <img\r\n                    style={{ height: 50, borderRadius: '50%', width: 50, position: 'static' }}\r\n                    src={`${process.env.REACT_APP_API_URL}${rowData.image}`}\r\n                    alt=\"\"\r\n                />\r\n            ),\r\n\r\n            sorting: false,\r\n        },\r\n        {\r\n            title: 'Full Name',\r\n            field: 'fullname',\r\n            searchable: true,\r\n            sorting: false,\r\n        },\r\n        {\r\n            title: 'Orion Start Day',\r\n            field: 'firstJobDay',\r\n            type: 'date',\r\n            searchable: true,\r\n            sorting: true,\r\n        },\r\n        {\r\n            title: 'Department',\r\n            field: 'department',\r\n            searchable: true,\r\n            sorting: false,\r\n        },\r\n\r\n        {\r\n            title: 'Position',\r\n            field: 'workTitle',\r\n            searchable: true,\r\n            sorting: false,\r\n        },\r\n\r\n        {\r\n            title: 'University',\r\n            field: 'university',\r\n            searchable: true,\r\n            sorting: false,\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <MaterialTable\r\n                    isLoading={isLoading}\r\n                    icons={tableIcons}\r\n                    title={<MyNewTitle variant=\"h3\" text=\"Employee List\" />}\r\n                    data={data}\r\n                    columns={columns}\r\n                    localization={{\r\n                        body: {\r\n                            emptyDataSourceMessage: (\r\n                                <h1\r\n                                    style={{\r\n                                        textAlign: 'center',\r\n                                        fontSize: 14,\r\n                                    }}\r\n                                >\r\n                                    There is no user available\r\n                                </h1>\r\n                            ),\r\n                        },\r\n                    }}\r\n                    onSelectionChange={(rows) => setSelectedRows(rows)}\r\n                    actions={[\r\n                        {\r\n                            icon: DeleteActionIcon,\r\n                            tooltip: 'Delete all selected rows',\r\n                            onClick: () =>\r\n                                DeleteUsersByIds(selectedRows)\r\n                                    .then((response) => {\r\n                                        if (response.deletedCount > 0) {\r\n                                            toggleUpdate()\r\n                                            toast.success(`${response.deletedCount} User Deleted!`)\r\n                                        }\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        toast.error('Delete Failed.')\r\n                                        console.error(error)\r\n                                    }),\r\n                        },\r\n                        {\r\n                            icon: GetAppActionIcon,\r\n                            onClick: (event, rowData) => generateDoc(rowData),\r\n                        },\r\n                        {\r\n                            icon: AddActionIcon,\r\n                            isFreeAction: true,\r\n                            onClick: () => navigate('/'),\r\n                        },\r\n                    ]}\r\n                    detailPanel={[\r\n                        {\r\n                            icon: KeyboardRightActionIcon,\r\n                            openIcon: KeyboardDownActionIcon,\r\n                            tooltip: 'Show Both',\r\n                            render: (rowData) => {\r\n                                return <UserEdit data={rowData} />\r\n                            },\r\n                        },\r\n                    ]}\r\n                    components={{\r\n                        // eslint-disable-next-line react/no-unstable-nested-components\r\n                        Toolbar: (props) => (\r\n                            <div>\r\n                                <MTableToolbar {...props} />\r\n                            </div>\r\n                        ),\r\n                    }}\r\n                    options={{\r\n                        sorting: true,\r\n                        search: true,\r\n                        searchFieldAlignment: 'right',\r\n                        searchFieldVariant: 'standard',\r\n                        paging: false,\r\n                        actionsColumnIndex: -1,\r\n                        exportAllData: true,\r\n                        showTextRowsSelected: false,\r\n                        showSelectAllCheckbox: true,\r\n                        selection: true,\r\n                        addRowPosition: 'first',\r\n                        filtering: true,\r\n                        rowStyle: (x) => {\r\n                            if (x.tableData.id % 2 === 0) {\r\n                                return { backgroundColor: '#f2f2f2' }\r\n                            }\r\n                            return { backgroundColor: '#ffffff' }\r\n                        },\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserTable\r\n","import axios from 'axios'\r\n\r\nconst HTTP = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL,\r\n})\r\n\r\n/**\r\n * Method to create new Form\r\n *\r\n * @param {FormData} formData\r\n * @returns Promise\r\n */\r\nexport const CreateForm = (formData) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post('/api/dynamic/create-form', formData, {\r\n            headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n        })\r\n            .then((res) => resolve(res.data))\r\n            .catch((error) => reject(error))\r\n    })\r\n}\r\n\r\nexport const UpdateForm = (formData) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.put('/api/dynamic/update-form', formData, {\r\n            headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n        })\r\n            .then((res) => resolve(res.data))\r\n            .catch((error) => reject(error))\r\n    })\r\n}\r\n\r\nexport const GetAvailableForms = () => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.get('api/dynamic/get-forms', {\r\n            headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n        })\r\n            .then((res) => {\r\n                resolve(res.data)\r\n            })\r\n            .catch((err) => {\r\n                reject(err)\r\n            })\r\n    })\r\n}\r\nexport const DeleteFormsByIds = (ids) => {\r\n    const payload = {\r\n        form_ids: ids,\r\n        token: localStorage.getItem('jwt'),\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.delete('/api/dynamic/delete-forms', { data: payload })\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\nexport const CreateAdminAccount = (body) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post('/api/account/register-as-admin', body, {\r\n            headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n        })\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\nexport const submitFormDocument = (body) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post('/api/dynamic', body)\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n/**\r\n * Method to get forms by form id\r\n * @param {String} formId\r\n * @returns Promise\r\n */\r\nexport const GetForm = (formId) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post(\r\n            '/api/dynamic/get-form',\r\n            { formId },\r\n            {\r\n                headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n            }\r\n        )\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport const GetFormDetails = (formId) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.post(\r\n            '/api/dynamic/get-form-details',\r\n            {\r\n                formId,\r\n            },\r\n            {\r\n                headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n            }\r\n        )\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n/**\r\n * Method to delete form documents by document ids\r\n *\r\n * @param {Array} documentIds\r\n * @param {String} formId\r\n *\r\n */\r\nexport const DeleteFormDocuments = (documentIds, formId) => {\r\n    const payload = {\r\n        document_ids: documentIds,\r\n        form_id: formId,\r\n        token: localStorage.getItem('jwt'),\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.delete('/api/dynamic/', { data: payload })\r\n            .then((response) => {\r\n                resolve(response.data)\r\n            })\r\n            .catch((error) => {\r\n                reject(error)\r\n            })\r\n    })\r\n}\r\n\r\nexport const UpdateSelectedDocument = (document, formId) => {\r\n    return new Promise((resolve, reject) => {\r\n        HTTP.put(\r\n            '/api/dynamic/',\r\n            {\r\n                ...document,\r\n                document_id: document._id,\r\n                form_id: formId,\r\n            },\r\n            {\r\n                headers: { 'x-access-token': localStorage.getItem('jwt') },\r\n            }\r\n        )\r\n            .then((res) => resolve(res.data))\r\n            .catch((err) => reject(err))\r\n    })\r\n}\r\n","const Logout = (navigate) => {\r\n    localStorage.removeItem('jwt')\r\n    navigate('/dynamic')\r\n}\r\nexport default Logout\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../UserCreate.css'\r\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded'\r\nimport PreviewIcon from '@material-ui/icons/RemoveRedEyeSharp'\r\nimport DynamicFeedRoundedIcon from '@material-ui/icons/DynamicFeedRounded'\r\nimport AddCircleSharpIcon from '@material-ui/icons/AddCircleSharp'\r\nimport LogoutIcon from '@material-ui/icons/ExitToApp'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { Edit } from '@mui/icons-material/'\r\nimport { Delete } from '@material-ui/icons'\r\n\r\nimport Swal from 'sweetalert2'\r\nimport { GetAvailableForms, DeleteFormsByIds } from '../methods/DynamicForms'\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'\r\nimport useStore from '../store'\r\nimport { isExpired } from '../methods/Account'\r\nimport { GetUserDetails } from '../methods/GetUsers'\r\nimport logout from '../methods/Logout'\r\nimport { useNavigate, Link } from 'react-router-dom'\r\n\r\nconst AdminPanel = () => {\r\n    const [data, setData] = useState([])\r\n    const [userDetail, setUserDetail] = useState('')\r\n    const [search, setSearch] = useState('')\r\n    const store = useStore()\r\n    const { toggleUpdate } = store\r\n    const { isUpdated } = store\r\n    const navigate = useNavigate()\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const CrudTools = (permission, id) => {\r\n        if (permission === 'write') {\r\n            return (\r\n                <div>\r\n                    <Tooltip title=\"Formu Gör\">\r\n                        <Link\r\n                            to={`/dynamic/form/${id}`}\r\n                            style={{\r\n                                color: 'white',\r\n                            }}\r\n                            type=\"button\"\r\n                            id=\"update\"\r\n                            className=\"btn btn-sm bg-white\"\r\n                        >\r\n                            <PreviewIcon htmlColor=\"green\" fontSize=\"medium\" marginRight={1} />\r\n                        </Link>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Forma Kayıtlı Verileri Gör\">\r\n                        <Link\r\n                            to={`/dynamic/form-table/${id}`}\r\n                            style={{\r\n                                color: 'white',\r\n                                marginLeft: '0.3rem',\r\n                            }}\r\n                            type=\"button\"\r\n                            id=\"update\"\r\n                            className=\"btn btn-sm bg-white\"\r\n                        >\r\n                            <DynamicFeedRoundedIcon\r\n                                htmlColor=\"#007AFF\"\r\n                                fontSize=\"medium\"\r\n                                marginRight={1}\r\n                            />\r\n                        </Link>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Formu Güncelle\">\r\n                        <Link\r\n                            to={`/dynamic/form-edit/${id}`}\r\n                            style={{\r\n                                marginLeft: '0.3rem',\r\n                                color: 'white',\r\n                            }}\r\n                            type=\"button\"\r\n                            className=\"btn bg-white btn-sm\"\r\n                        >\r\n                            {' '}\r\n                            <Edit htmlColor=\"orange\" fontSize=\"medium\" marginRight={1} />\r\n                        </Link>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Formu Sil\">\r\n                        <button\r\n                            style={{\r\n                                marginLeft: '0.4rem',\r\n                            }}\r\n                            type=\"button\"\r\n                            onClick={() => {\r\n                                DeleteForms([id])\r\n                            }}\r\n                            id=\"sil\"\r\n                            className=\"btn bg-white btn-sm\"\r\n                        >\r\n                            <Delete htmlColor=\"red\" fontSize=\"medium\" marginRight={1} />\r\n                        </button>\r\n                    </Tooltip>{' '}\r\n                </div>\r\n            )\r\n        } else if (permission === 'read') {\r\n            return (\r\n                <div>\r\n                    <Tooltip title=\"Formu Gör\">\r\n                        <Link\r\n                            to={`/dynamic/form/${id}`}\r\n                            style={{\r\n                                color: 'green',\r\n                            }}\r\n                            type=\"button\"\r\n                            id=\"update\"\r\n                            className=\"btn btn-sm bg-white\"\r\n                        >\r\n                            <PreviewIcon htmlColor=\"#007AFF\" fontSize=\"medium\" marginRight={1} />\r\n                        </Link>\r\n                    </Tooltip>{' '}\r\n                    <Tooltip title=\"Forma Kayıtlı Verileri Gör\">\r\n                        <Link\r\n                            to={`/dynamic/form-table/${id}`}\r\n                            style={{\r\n                                color: 'white',\r\n                            }}\r\n                            type=\"button\"\r\n                            id=\"update\"\r\n                            className=\"btn btn-sm bg-white\"\r\n                        >\r\n                            <DynamicFeedRoundedIcon\r\n                                htmlColor=\"#007AFF\"\r\n                                fontSize=\"medium\"\r\n                                marginRight={1}\r\n                            />\r\n                        </Link>\r\n                    </Tooltip>{' '}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = 'Form List'\r\n        isExpired()\r\n            .then((res) => {\r\n                if (res) {\r\n                    navigate('/dynamic')\r\n                }\r\n            })\r\n            .catch((error) => console.log(error))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        GetAvailableForms().then((response) => {\r\n            setData(response)\r\n        })\r\n    }, [isUpdated])\r\n\r\n    useEffect(() => {\r\n        GetUserDetails().then((response) => {\r\n            setUserDetail(response)\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    const DeleteForms = (id) => {\r\n        Swal.fire({\r\n            title: 'Emin misin?',\r\n            text: 'Seçilen form tüm içeriğiyle birlikte silinecektir!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Sil',\r\n            cancelButtonText: 'Vazgeç',\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                DeleteFormsByIds(id)\r\n                    .then((response) => {\r\n                        if (response.deletedCount > 0) {\r\n                            Swal.fire({\r\n                                icon: 'success',\r\n                                title: 'Başarılı!',\r\n                                text: ' Form başarıyla silindi.',\r\n                            })\r\n                            toggleUpdate()\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Silme işlemi geçersiz.',\r\n                        })\r\n                    })\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            {!isLoading ? (\r\n                <div className=\"form-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"form-holder\">\r\n                            <div className=\"form-content\">\r\n                                <div className=\"form-items\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <h3>Form Yönetimi</h3>\r\n                                            <p style={{ textTransform: 'uppercase' }}>\r\n                                                HOŞGELDİN {userDetail.username}\r\n                                            </p>\r\n                                        </div>\r\n                                        <div\r\n                                            style={{ textAlign: 'center' }}\r\n                                            className=\"form-group col-md-4\"\r\n                                        >\r\n                                            <input\r\n                                                className=\"form-control border-end-0 border rounded-pill\"\r\n                                                type=\"text\"\r\n                                                placeholder=\"Arama...\"\r\n                                                id=\"example-search-input\"\r\n                                                onChange={(e) => {\r\n                                                    setSearch(e.target.value)\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div\r\n                                            style={{ textAlign: 'right' }}\r\n                                            className=\"form-group col-md-4 mt-2\"\r\n                                        >\r\n                                            {userDetail.role === 'root' ? (\r\n                                                <Tooltip title=\"Yeni Form Oluştur\">\r\n                                                    <Link\r\n                                                        to={`/dynamic/form-create`}\r\n                                                        type=\"button\"\r\n                                                        id=\"add\"\r\n                                                        className=\"btn btn-success btn-sm\"\r\n                                                    >\r\n                                                        <AddCircleSharpIcon\r\n                                                            htmlColor=\"white\"\r\n                                                            fontSize=\"small\"\r\n                                                            marginRight={1}\r\n                                                        />\r\n                                                        <small> Yeni Form </small>\r\n                                                    </Link>\r\n                                                </Tooltip>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                            {userDetail.role === 'root' ? (\r\n                                                <Tooltip title=\"Admin Hesaplarına Erişim\">\r\n                                                    <Link\r\n                                                        to={`/dynamic/create-admin`}\r\n                                                        type=\"button\"\r\n                                                        style={{\r\n                                                            background: 'coral',\r\n                                                            marginLeft: '0.4rem',\r\n                                                        }}\r\n                                                        className=\"btn btn-sm text-white\"\r\n                                                    >\r\n                                                        <small> Hesap Yönetimi </small>\r\n                                                    </Link>\r\n                                                </Tooltip>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                            <Tooltip title=\"Çıkış Yap\">\r\n                                                <button\r\n                                                    style={{\r\n                                                        background: '#495056',\r\n                                                        marginLeft: '0.4rem',\r\n                                                    }}\r\n                                                    className=\"btn btn-sm text-white\"\r\n                                                    onClick={() => logout(navigate)}\r\n                                                >\r\n                                                    <LogoutIcon\r\n                                                        htmlColor=\"white\"\r\n                                                        fontSize=\"small\"\r\n                                                        marginRight={1}\r\n                                                    />\r\n                                                </button>\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        {data\r\n                                            .filter((form) => {\r\n                                                if (search === '') {\r\n                                                    return form\r\n                                                } else if (\r\n                                                    form.formName\r\n                                                        .toLowerCase()\r\n                                                        .includes(search.toLowerCase())\r\n                                                ) {\r\n                                                    return form\r\n                                                }\r\n                                            })\r\n                                            .map((form) => (\r\n                                                <div className=\"form-group col-xl-6 col-md-6 col-sm-12 mt-5\">\r\n                                                    <div className=\"card\">\r\n                                                        <div\r\n                                                            className=\"card-header\"\r\n                                                            style={{\r\n                                                                backgroundColor: form.primaryColor,\r\n                                                            }}\r\n                                                        >\r\n                                                            <div className=\"row align-items-center\">\r\n                                                                <div\r\n                                                                    className=\"col-xl-6 col-md-6 col-sm-12\"\r\n                                                                    style={{ color: '#fff' }}\r\n                                                                >\r\n                                                                    {form.formName}\r\n                                                                </div>\r\n                                                                <div\r\n                                                                    className=\"col-xl-6 col-md-6 col-sm-12\"\r\n                                                                    style={{ textAlign: 'right' }}\r\n                                                                >\r\n                                                                    {userDetail.role !== 'root'\r\n                                                                        ? userDetail.allowedForms.map(\r\n                                                                              (item) => {\r\n                                                                                  if (\r\n                                                                                      item.formId ===\r\n                                                                                          form._id &&\r\n                                                                                      item.permissionType ===\r\n                                                                                          'write'\r\n                                                                                  ) {\r\n                                                                                      return CrudTools(\r\n                                                                                          'write',\r\n                                                                                          form._id\r\n                                                                                      )\r\n                                                                                  } else if (\r\n                                                                                      item.formId ===\r\n                                                                                          form._id &&\r\n                                                                                      item.permissionType ===\r\n                                                                                          'read'\r\n                                                                                  ) {\r\n                                                                                      return CrudTools(\r\n                                                                                          'read',\r\n                                                                                          form._id\r\n                                                                                      )\r\n                                                                                  }\r\n                                                                              }\r\n                                                                          )\r\n                                                                        : CrudTools(\r\n                                                                              'write',\r\n                                                                              form._id\r\n                                                                          )}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"card-body\">\r\n                                                            <div className=\"form-group col-md-12 col-sm-12\">\r\n                                                                <p className=\"card-text\">\r\n                                                                    {form.description}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div> Yükleniyor... </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminPanel\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { toast } from 'react-toastify'\r\nimport { isExpired, Login } from '../methods/Account'\r\n\r\nconst DynamicLoginPage = () => {\r\n    const [isLoading, setLoading] = useState(false)\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        isExpired().then((res) => {\r\n            if (!res) {\r\n                navigate('/dynamic/form-list')\r\n            }\r\n        })\r\n    }, [navigate])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n            password: '',\r\n        },\r\n        validationSchema: Yup.object({\r\n            username: Yup.string().required('Username is required'),\r\n            password: Yup.string().required('Password is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            setLoading(true)\r\n            Login(values.username, values.password)\r\n                .then((res) => {\r\n                    if (res.data.token) {\r\n                        localStorage.setItem('jwt', res.data.token)\r\n                        navigate('/dynamic/form-list')\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    setLoading(false)\r\n                    toast.error('Login failed! Wrong username or password.', { autoClose: 2000 })\r\n                    console.log(err)\r\n                })\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"form-holder\">\r\n                        <div className=\"form-content\">\r\n                            <div className=\"form-items login\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group col-md-9\">\r\n                                        <h3>LOG IN</h3>\r\n                                        <p>ACCESSING PANEL</p>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ textAlign: 'right' }}\r\n                                        className=\"form-group col-md-3\"\r\n                                    >\r\n                                        <Link\r\n                                            to=\"/\"\r\n                                            style={{ background: '#495056' }}\r\n                                            class=\"btn btn-primary\"\r\n                                        >\r\n                                            Back\r\n                                        </Link>\r\n                                    </div>\r\n                                </div>\r\n                                <form onSubmit={formik.handleSubmit} encType=\"\">\r\n                                    <div className=\"row mt-4\">\r\n                                        <div className=\"form-group col-md-12\">\r\n                                            <label htmlFor=\"name\">Username</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control\"\r\n                                                id=\"name\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.username}\r\n                                                name=\"username\"\r\n                                            />\r\n                                            {formik.errors.username && formik.errors.username ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.username}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                        <div className=\"form-group mt-4 col-md-12\">\r\n                                            <label htmlFor=\"Surname\">Password</label>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                className=\"form-control\"\r\n                                                id=\"surname\"\r\n                                                onChange={formik.handleChange}\r\n                                                value={formik.password}\r\n                                                name=\"password\"\r\n                                            />\r\n                                            {formik.touched.password && formik.errors.password ? (\r\n                                                <p className=\"formikValidate\">\r\n                                                    {formik.errors.password}\r\n                                                </p>\r\n                                            ) : null}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div\r\n                                        style={{ textAlign: 'center' }}\r\n                                        className=\"form-button mt-3\"\r\n                                    >\r\n                                        {!isLoading ? (\r\n                                            <button\r\n                                                style={{ background: 'coral ' }}\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn btn-primary\"\r\n                                            >\r\n                                                Login\r\n                                            </button>\r\n                                        ) : (\r\n                                            <button\r\n                                                style={{ background: 'coral ' }}\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn btn-primary\"\r\n                                            >\r\n                                                <span\r\n                                                    className=\"spinner-border spinner-border-sm\"\r\n                                                    role=\"status\"\r\n                                                    aria-hidden=\"true\"\r\n                                                />\r\n                                            </button>\r\n                                        )}\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DynamicLoginPage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport AddCircleSharpIcon from '@material-ui/icons/AddCircleSharp'\r\nimport { getRole, isExpired } from '../methods/Account'\r\nimport { CreateAdminAccount, GetAvailableForms } from '../methods/DynamicForms'\r\nimport 'react-confirm-alert/src/react-confirm-alert.css'\r\nimport useStore from '../store'\r\nimport { v4 as uuid } from 'uuid'\r\nimport { ArrowBack } from '@mui/icons-material'\r\nimport { Tooltip } from '@material-ui/core'\r\n\r\nconst CreateAdmin = () => {\r\n    const navigate = useNavigate()\r\n    const [forms, setForms] = useState([])\r\n    const [isLoading, toggleLoading] = useState(true)\r\n    const [formPermission, setFormPermission] = useState([])\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const store = useStore()\r\n    const { toggleUpdate } = store\r\n    const [show, setShow] = useState(false)\r\n    const [inputType, setInputType] = useState()\r\n    const [selectedForm, setSelectedForm] = useState()\r\n\r\n    const removePermission = (index) => {\r\n        setFormPermission(formPermission.filter((item) => formPermission.indexOf(item) !== index))\r\n    }\r\n\r\n    const handleAddFields = () => {\r\n        setFormPermission([...formPermission, { id: uuid(), show: false }])\r\n    }\r\n\r\n    const handlePermissionValueParent = (index, event) => {\r\n        if (\r\n            event.target.name === 'formId' &&\r\n            formPermission.find((e) => e.formId === event.target.value)\r\n        ) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Bu izini daha önce gerçekleştirdiniz.',\r\n            })\r\n        } else {\r\n            const updatedPermissions = [...formPermission]\r\n            updatedPermissions[index][event.target.name] =\r\n                event.target.name === 'show' ? event.target.checked : event.target.value\r\n            setFormPermission(updatedPermissions)\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        const body = {}\r\n        body.username = username\r\n        body.password = password\r\n        const allowedForms = []\r\n        formPermission.map((item) => {\r\n            const form = {}\r\n            Object.keys(item).forEach((key) => {\r\n                if (key !== 'id' || key !== 'show') {\r\n                    form[key] = item[key]\r\n                }\r\n            })\r\n            allowedForms.push(form)\r\n        })\r\n        body.allowedForms = allowedForms\r\n\r\n        if (body.username !== '' && body.password !== '') {\r\n            if (body.allowedForms.length > 0) {\r\n                CreateAdminAccount(body)\r\n                    .then((res) => {\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: 'Başarılı!',\r\n                            text: 'Hesap başarıyla oluşturuldu.',\r\n                        })\r\n                        toggleUpdate()\r\n                        console.log(res)\r\n                    })\r\n                    .catch((error) => {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Hesap oluşturma işlemi gerçekleştirilemedi.',\r\n                        })\r\n                        console.log(error)\r\n                    })\r\n                e.preventDefault()\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oluşturulan hesaba, en az 1 form yetkisi verilmesi gerektir.',\r\n                })\r\n                e.preventDefault()\r\n            }\r\n        } else {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Kullanıcı adı ve şifre olmadan hesap oluşturulamaz.',\r\n            })\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = 'Admin Create'\r\n        isExpired()\r\n            .then((res) => {\r\n                if (res) {\r\n                    navigate('/dynamic')\r\n                }\r\n                getRole().then((roleResponse) => {\r\n                    if (roleResponse.role !== 'root') navigate('/dynamic')\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n\r\n        GetAvailableForms()\r\n            .then((res) => {\r\n                setForms(res)\r\n                toggleLoading(false)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }, [])\r\n\r\n    if (!isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"form-body\">\r\n                    <div className=\"row\">\r\n                        <div className=\"form-holder\">\r\n                            <div className=\"form-content\">\r\n                                <div className=\"form-items\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group col-md-6\">\r\n                                            <h3>Hesap Oluşturma ve Yetkilendirme</h3>\r\n                                            <p>ADMİN HESABI VE İZİNLERİ</p>\r\n                                        </div>\r\n                                        <div\r\n                                            style={{ textAlign: 'right' }}\r\n                                            className=\"form-group col-md-6\"\r\n                                        >\r\n                                            <Tooltip title=\"Geri Dön\">\r\n                                                <Link\r\n                                                    style={{\r\n                                                        marginLeft: '0.4rem',\r\n                                                        backgroundColor:\"#4d4c4c\"\r\n                                                    }}\r\n                                                    to={'/dynamic/form-list'}\r\n                                                    id=\"backButton\"\r\n                                                    aria-pressed=\"true\"\r\n                                                    className=\"btn btn-sm me-2\"\r\n                                                >\r\n                                                    <ArrowBack htmlColor='white'/>\r\n                                                </Link>\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    </div>\r\n                                    <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\r\n                                        <div className=\"row mt-2\">\r\n                                            <div className=\"form-group col-md-6 col-sm-12\">\r\n                                                <label htmlFor=\"fullname\">\r\n                                                    Kullanıcı Adı Atama\r\n                                                </label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    id=\"username\"\r\n                                                    name=\"username\"\r\n                                                    placeholder=\"Kullanıcı Adı\"\r\n                                                    onChange={(e) => {\r\n                                                        setUsername(e.target.value)\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"form-group col-md-6 col-sm-12\">\r\n                                                <label htmlFor=\"fullname\">Şifre Atama</label>\r\n                                                <input\r\n                                                    type=\"password\"\r\n                                                    id=\"password\"\r\n                                                    name=\"password\"\r\n                                                    className=\"form-control\"\r\n                                                    onChange={(e) => {\r\n                                                        setPassword(e.target.value)\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"row mt-4 justify-content-center\">\r\n                                            <div className=\"form-group col-auto\">\r\n                                                <button\r\n                                                    id=\"addForm\"\r\n                                                    type=\"button\"\r\n                                                    style={{ background: '#495056' }}\r\n                                                    onClick={() => handleAddFields()}\r\n                                                    className=\"btn btn-sm text-white\"\r\n                                                >\r\n                                                    <small>Form ve Yetkilerini Belirle</small>\r\n                                                    <AddCircleSharpIcon\r\n                                                        htmlColor=\"white\"\r\n                                                        fontSize=\"small\"\r\n                                                        style={{ marginLeft: '5px' }}\r\n                                                    />\r\n                                                </button>\r\n                                            </div>\r\n                                            <div className=\"col-auto\">\r\n                                                <p className=\"mt-2\" style={{ fontSize: '12px' }}>\r\n                                                    (Oluşturuduğunuz hesabı; birden çok form ile\r\n                                                    ilişkilendirebilir, aynı zamanda form içinde\r\n                                                    yetkilendirme işlemi gerçekleştirebilirsiniz.\r\n                                                    Seçim yapmadığınız takdirde tüm formlara erişimi\r\n                                                    olan bir hesap oluşturursunuz. Aynı zamanda\r\n                                                    seçilen bir form içinde de yetkilendirme işlemi\r\n                                                    gerçekleştirebilirsiniz.)\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                        {formPermission.map((item, index) => {\r\n                                            return (\r\n                                                <form\r\n                                                    key={item.id}\r\n                                                    className=\"row mt-4 p-5\"\r\n                                                    style={{ border: 'solid 1px coral' }}\r\n                                                    onChange={(e) =>\r\n                                                        handlePermissionValueParent(index, e)\r\n                                                    }\r\n                                                >\r\n                                                    <div className=\"form-group col-12 col-md-4 col-sm-4\">\r\n                                                        <label htmlFor=\"fullname\">Form Atama</label>\r\n                                                        <select\r\n                                                            name=\"formId\"\r\n                                                            id=\"allowedForms\"\r\n                                                            className=\"form-select\"\r\n                                                            onChange={(e) => {\r\n                                                                setSelectedForm(e.target.value)\r\n                                                            }}\r\n                                                        >\r\n                                                            <option selected disabled>\r\n                                                                Form Seç\r\n                                                            </option>\r\n                                                            {forms.map((form, index) => {\r\n                                                                return (\r\n                                                                    <option\r\n                                                                        key={form.formName}\r\n                                                                        value={form._id}\r\n                                                                    >\r\n                                                                        {form.formName}\r\n                                                                    </option>\r\n                                                                )\r\n                                                            })}\r\n                                                        </select>\r\n                                                    </div>\r\n                                                    <div className=\"form-group col-12 col-md-5 col-sm-5\">\r\n                                                        <label htmlFor=\"fullname\">\r\n                                                            Yetkilendirme\r\n                                                        </label>\r\n                                                        <select\r\n                                                            id=\"permission\"\r\n                                                            className=\"form-select\"\r\n                                                            name=\"permissionType\"\r\n                                                        >\r\n                                                            <option selected disabled>\r\n                                                                Yetki seç\r\n                                                            </option>\r\n                                                            <option value=\"read\">\r\n                                                                Görebilir. (Listeleme)\r\n                                                            </option>\r\n                                                            <option value=\"write\">\r\n                                                                İşlem yapabilir.\r\n                                                                (Listeleme/Güncelleme/Silme)\r\n                                                            </option>\r\n                                                        </select>\r\n                                                    </div>\r\n                                                    <div className=\"form-check col-12 col-md-2 col-sm-2\">\r\n                                                        <div\r\n                                                            style={{ float: 'right' }}\r\n                                                            className=\"form-group mt-4\"\r\n                                                        >\r\n                                                            <input\r\n                                                                className=\"form-check-input\"\r\n                                                                type=\"checkbox\"\r\n                                                                name=\"show\"\r\n                                                                id=\"flexCheckDefault\"\r\n                                                            />\r\n                                                            <label>Yetkiyi Özelleştir</label>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    {item.show ? (\r\n                                                        <div className=\"row\">\r\n                                                            {forms.find(\r\n                                                                (e) => e._id === item.formId\r\n                                                            ) ? (\r\n                                                                <div className=\"row\">\r\n                                                                    <div className=\"form-group col-12 col-md-6 col-sm-6 mt-4\">\r\n                                                                        <label htmlFor=\"fullname\">\r\n                                                                            Form İçinde Yetkilendir\r\n                                                                        </label>\r\n                                                                        <select\r\n                                                                            name=\"allowedField\"\r\n                                                                            id=\"allowedField\"\r\n                                                                            className=\"form-select\"\r\n                                                                            onChange={(e) => {\r\n                                                                                setInputType(\r\n                                                                                    forms.find(\r\n                                                                                        (e) =>\r\n                                                                                            e._id ===\r\n                                                                                            selectedForm\r\n                                                                                    ).formDetails[\r\n                                                                                        e.target\r\n                                                                                            .value\r\n                                                                                    ].type\r\n                                                                                )\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <option\r\n                                                                                selected\r\n                                                                                disabled\r\n                                                                            >\r\n                                                                                Forma ait bir alan\r\n                                                                                seçiniz.\r\n                                                                            </option>\r\n                                                                            {Object.entries(\r\n                                                                                forms.find(\r\n                                                                                    (e) =>\r\n                                                                                        e._id ===\r\n                                                                                        selectedForm\r\n                                                                                ).formDetails\r\n                                                                            ).map(\r\n                                                                                ([\r\n                                                                                    detail,\r\n                                                                                    value,\r\n                                                                                ]) => {\r\n                                                                                    return (\r\n                                                                                        <option\r\n                                                                                            key={\r\n                                                                                                value.type\r\n                                                                                            }\r\n                                                                                            value={\r\n                                                                                                detail\r\n                                                                                            }\r\n                                                                                        >\r\n                                                                                            {detail}{' '}\r\n                                                                                            /{' '}\r\n                                                                                            {\r\n                                                                                                value.type\r\n                                                                                            }\r\n                                                                                        </option>\r\n                                                                                    )\r\n                                                                                }\r\n                                                                            )}\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                    <div className=\"form-group col-12 col-md-6 col-sm-6 mt-4\">\r\n                                                                        <label htmlFor=\"fullname\">\r\n                                                                            Yetkili Alana Değer\r\n                                                                            Atama\r\n                                                                        </label>\r\n                                                                        <input\r\n                                                                            name=\"allowedValue\"\r\n                                                                            id=\"allowedValue\"\r\n                                                                            type={inputType}\r\n                                                                            className=\"form-control mt-1\"\r\n                                                                        />\r\n                                                                    </div>{' '}\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <div className=\"row\">\r\n                                                                    {' '}\r\n                                                                    <p className=\"formikValidate\">\r\n                                                                        Form seçimi yapmadan yetki\r\n                                                                        özelleştirilemez.\r\n                                                                    </p>\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"form-group col-12 col-md-12 col-sm-12\">\r\n                                                            <div\r\n                                                                style={{ textAlign: 'center' }}\r\n                                                                className=\"form-group mt-4\"\r\n                                                            >\r\n                                                                <button\r\n                                                                    type=\"button\"\r\n                                                                    id=\"removeForm\"\r\n                                                                    className=\"btn btn-danger btn-sm\"\r\n                                                                    style={{ marginLeft: '5px' }}\r\n                                                                    onClick={() =>\r\n                                                                        removePermission(index)\r\n                                                                    }\r\n                                                                >\r\n                                                                    Sil\r\n                                                                </button>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </form>\r\n                                            )\r\n                                        })}\r\n                                        <div\r\n                                            style={{ textAlign: 'center' }}\r\n                                            className=\"form-button mt-4\"\r\n                                        >\r\n                                            <button\r\n                                                style={{ background: 'coral ' }}\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn btn-primary mt-4\"\r\n                                                onClick={handleSubmit}\r\n                                            >\r\n                                                Kaydet\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return <div>Loading</div>\r\n}\r\n\r\nexport default CreateAdmin\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../UserCreate.css'\r\nimport camelcase from 'camelcase'\r\nimport useStore from '../store'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    IconButton,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Select,\r\n    TextField,\r\n    MenuItem,\r\n    FormHelperText,\r\n} from '@mui/material'\r\nimport { DeleteOutlined, Add, ArrowBack } from '@material-ui/icons'\r\nimport Tooltip from '@mui/material/Tooltip'\r\nimport { CreateForm } from '../methods/DynamicForms'\r\nimport { getRole, isExpired } from '../methods/Account'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\nconst FormCreate = () => {\r\n    const [formFields, setFormFields] = useState([{ id: uuid() }])\r\n    const [formName, setFormName] = useState()\r\n    const [selectedColor, setSelectedColor] = useState()\r\n    const [file, setFile] = useState()\r\n    const [formDescription, setFormDescription] = useState()\r\n    const [isLoading, setLoading] = useState(true)\r\n    const store = useStore()\r\n    const { colors, fieldTypes } = store\r\n    const [errors, setErrors] = useState({\r\n        formName: { status: false, message: null },\r\n        selectedColor: { status: false, message: null },\r\n        file: { status: false, message: null },\r\n        formDescription: { status: false, message: null },\r\n    })\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        isExpired()\r\n            .then((res) => {\r\n                if (res) {\r\n                    navigate('/dynamic')\r\n                }\r\n                getRole().then((roleResponse) => {\r\n                    if (roleResponse.role !== 'root') navigate('/dynamic/form-list')\r\n                })\r\n                setLoading(false)\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n    }, [])\r\n\r\n    const deleteFormField = (index) => {\r\n        if (formFields.length > 1) {\r\n            setFormFields(formFields.filter((item) => formFields.indexOf(item) !== index))\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (index, event) => {\r\n        const updatedFormFields = [...formFields]\r\n\r\n        updatedFormFields[index][event.target.name] =\r\n            event.target.type === 'checkbox' ? event.target.checked : event.target.value\r\n        setFormFields(updatedFormFields)\r\n        clearDynamicErrors(index, event)\r\n    }\r\n\r\n    const clearDynamicErrors = (index, event) => {\r\n        const updatedFormFields = [...formFields]\r\n        if (event.target.name === 'min' || event.target.name === 'max') {\r\n            updatedFormFields[index].minError = null\r\n            updatedFormFields[index].maxError = null\r\n        } else {\r\n            updatedFormFields[index][event.target.name + 'Error'] = null\r\n        }\r\n    }\r\n    const clearNormalErrors = (errorField) => {\r\n        const updatedErrors = errors\r\n        updatedErrors[errorField] = { status: false, message: null }\r\n    }\r\n\r\n    const checkValidation = () => {\r\n        let isValid = true\r\n        const updatedFormFields = [...formFields]\r\n        const updatedErrors = errors\r\n        if (!formName) {\r\n            updatedErrors.formName.status = true\r\n            updatedErrors.formName.message = 'Form Adı boş bırakılamaz'\r\n        }\r\n        if (!selectedColor) {\r\n            updatedErrors.selectedColor.status = true\r\n            updatedErrors.selectedColor.message = 'Bir Renk seçmelisiniz'\r\n        }\r\n        if (!file) {\r\n            updatedErrors.file.status = true\r\n            updatedErrors.file.message = 'Form için bir ikon eklemelisiniz'\r\n        }\r\n        if (!formDescription) {\r\n            updatedErrors.formDescription.status = true\r\n            updatedErrors.formDescription.message = 'Form açıklaması boş bırakılamaz'\r\n        }\r\n\r\n        formFields.map((item, index) => {\r\n            if (!item.fieldName) {\r\n                updatedFormFields[index].fieldNameError = 'Alan adı boş bırakılamaz.'\r\n                isValid = false\r\n            }\r\n            if (!item.type && item.type !== 0) {\r\n                updatedFormFields[index].typeError = 'Alan tipini doldurmalısınız.'\r\n                isValid = false\r\n            }\r\n            if (item.min >= item.max) {\r\n                updatedFormFields[index].minError = 'Minimum değer maksimum değerden yüksek olamaz'\r\n                updatedFormFields[index].maxError = 'Minimum değer maksimum değerden yüksek olamaz'\r\n                isValid = false\r\n            }\r\n        })\r\n        setErrors(updatedErrors)\r\n        setFormFields(updatedFormFields)\r\n        if (formFields.length < 2) {\r\n            isValid = false\r\n            toast.error('En az 2 Alan ekleyiniz')\r\n        }\r\n        return isValid\r\n    }\r\n    const submitForm = () => {\r\n        const isValid = checkValidation()\r\n        if (isValid) {\r\n            const formData = new FormData()\r\n            formData.append('file', file)\r\n            const formFieldDetails = {}\r\n            formFields.map((item) => {\r\n                const fieldNameCamelCased = camelcase(item.fieldName)\r\n\r\n                formFieldDetails[fieldNameCamelCased] = {\r\n                    type: fieldTypes[item.type].type,\r\n                    htmlLabel: item.fieldName,\r\n                    htmlType: fieldTypes[item.type].typeName,\r\n                    placeholder: item.placeholder,\r\n                }\r\n                if (item.required !== '')\r\n                    formFieldDetails[fieldNameCamelCased].required = item.required\r\n                if (item.max > item.min) {\r\n                    if (item.max && item.max > 0)\r\n                        formFieldDetails[fieldNameCamelCased].max = item.max\r\n                    if (item.min) formFieldDetails[fieldNameCamelCased].min = item.min\r\n                }\r\n            })\r\n            const formDetails = {\r\n                formName: formName,\r\n                description: formDescription,\r\n                primaryColor: selectedColor,\r\n            }\r\n            const formStructure = JSON.stringify([formFieldDetails, formDetails])\r\n            formData.append('formStructure', formStructure)\r\n            CreateForm(formData)\r\n                .then((res) => {\r\n                    if (res) toast.success('Form Oluşturuldu', { position: 'top-center' })\r\n                })\r\n                .catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    const placeholderType = (type) => {\r\n        if (type) {\r\n            switch (fieldTypes[type].type) {\r\n                case 'String':\r\n                    return 'text'\r\n                case 'Number':\r\n                    return 'number'\r\n            }\r\n        }\r\n        return 'text'\r\n    }\r\n\r\n    const isMinMaxDisabled = (type) => {\r\n        if (type) {\r\n            switch (fieldTypes[type].type) {\r\n                case 'Date':\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"container justify-content-center align-items-center d-flex\"\r\n            style={{ height: '100vh' }}\r\n        >\r\n            {!isLoading ? (\r\n                <div\r\n                    className=\" rounded shadow-sm\"\r\n                    id=\"bodyColor\"\r\n                    style={{ backgroundColor: '#FFFFFF' }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: selectedColor || '#4d4c4c',\r\n                            transition: '1s all',\r\n                        }}\r\n                    >\r\n                        <div className=\"row py-4 px-3\">\r\n                            <div className=\"form-group col-md-4\">\r\n                                <h3 className=\"form-header text-white\">Form Oluştur</h3>\r\n                                <p className=\"form-subtitle text-white\">\r\n                                    DİNAMİK YAPIDA FORM TASARIMI\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div style={{ textAlign: 'right' }} className=\"form-group col-md-8\">\r\n                                <Tooltip title=\"Geri dön\">\r\n                                    <Link\r\n                                        style={{\r\n                                            marginLeft: '0.4rem',\r\n                                        }}\r\n                                        to={'/dynamic/form-list'}\r\n                                        id=\"backButton\"\r\n                                        aria-pressed=\"true\"\r\n                                        className=\"btn bg-white btn-sm me-2\"\r\n                                    >\r\n                                        <ArrowBack />\r\n                                    </Link>\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <form\r\n                        className=\"needs-validation py-4  px-3\"\r\n                        noValidate\r\n                        encType=\"multipart/formData\"\r\n                    >\r\n                        <div className=\"row align-items-center\">\r\n                            <div className=\"col-md-4\">\r\n                                <TextField\r\n                                    name=\"formName\"\r\n                                    id=\"outlined-basic\"\r\n                                    sx={{ width: '100%' }}\r\n                                    label=\"Formun Adı\"\r\n                                    variant=\"outlined\"\r\n                                    helperText={errors.formName.message}\r\n                                    error={errors.formName.status}\r\n                                    onChange={(e) => {\r\n                                        setFormName(e.target.value)\r\n                                        clearNormalErrors(e.target.name)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <FormControl\r\n                                    sx={{ width: 'auto', display: 'flex' }}\r\n                                    error={errors.selectedColor.status}\r\n                                >\r\n                                    <InputLabel id=\"demo-multiple-checkbox-label\">\r\n                                        Bir Renk Seçiniz\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        SelectDisplayProps={{ style: { display: 'flex', alignItems:'center', justifyContent:'space-between' } }}\r\n                                        labelId=\"demo-multiple-checkbox-label\"\r\n                                        id=\"demo-multiple-checkbox\"\r\n                                        input={<OutlinedInput label=\"Bir Renk Seçiniz\" />}\r\n                                        defaultValue={''}\r\n                                        sx={{ width: '100%' }}\r\n                                        name=\"selectedColor\"\r\n                                        onChange={(e) => {\r\n                                            setSelectedColor(e.target.value)\r\n                                            clearNormalErrors(e.target.name)\r\n                                        }}\r\n                                    >\r\n                                        {colors.map((item) => {\r\n                                            return (\r\n                                                <MenuItem value={item.HEX} className=\"d-flex justify-content-between align-items-center\">\r\n                                                    <div>{item.color} </div>\r\n                                                    <div\r\n                                                        style={{\r\n                                                            height: '15px',\r\n                                                            width: '15px',\r\n                                                            backgroundColor: item.HEX,\r\n                                                            borderRadius: '50%',\r\n                                                            justifySelf: 'flex-end',\r\n                                                        }}\r\n                                                    ></div>\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                    <FormHelperText>\r\n                                        {errors.selectedColor.message || null}\r\n                                    </FormHelperText>\r\n                                </FormControl>\r\n                            </div>\r\n                            <div className=\"col-md-4 align-items-center d-flex justify-content-evenly\">\r\n                                <FormControl error={errors.file.status}>\r\n                                    <Button variant=\"contained\" component=\"label\">\r\n                                        Form İkonu Yükle\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            hidden\r\n                                            name=\"file\"\r\n                                            onChange={(e) => {\r\n                                                setFile(e.target.files[0])\r\n                                                clearNormalErrors(e.target.name)\r\n                                            }}\r\n                                        />\r\n                                    </Button>\r\n\r\n                                    <FormHelperText>{errors.file.message || null}</FormHelperText>\r\n                                </FormControl>\r\n                                {file && <label>{file.name}</label>}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row align-items-center mx-1 mt-3\">\r\n                            <TextField\r\n                                label=\"Form Açıklaması\"\r\n                                multiline\r\n                                rows={2}\r\n                                maxRows={4}\r\n                                name=\"formDescription\"\r\n                                onChange={(e) => {\r\n                                    setFormDescription(e.target.value)\r\n                                    clearNormalErrors(e.target.name)\r\n                                }}\r\n                                error={errors.formDescription.status}\r\n                                helperText={errors.formDescription.message}\r\n                            />\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-center align-items-center mt-2\">\r\n                            <IconButton\r\n                                onClick={() =>\r\n                                    setFormFields((formFields) => [...formFields, { id: uuid() }])\r\n                                }\r\n                            >\r\n                                <Tooltip title=\"Alan Ekle\">\r\n                                    <Add />\r\n                                </Tooltip>\r\n                            </IconButton>\r\n                        </div>\r\n                        {formFields.map((field, index) => {\r\n                            return (\r\n                                <form onChange={(e) => handleInputChange(index, e)} key={field.id}>\r\n                                    <div className=\"col mt-2 align-items-center\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-3\">\r\n                                                <TextField\r\n                                                    id=\"outlined-basic\"\r\n                                                    sx={{ width: '100%' }}\r\n                                                    label=\"Alan Adı\"\r\n                                                    variant=\"outlined\"\r\n                                                    name=\"fieldName\"\r\n                                                    value={field.fieldName}\r\n                                                    helperText={field.fieldNameError || null}\r\n                                                    error={field.fieldNameError}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"col-md-2\">\r\n                                                <FormControl\r\n                                                    sx={{ width: 'auto', display: 'flex' }}\r\n                                                    error={field.typeError}\r\n                                                >\r\n                                                    <InputLabel id=\"demo-multiple-checkbox-label\">\r\n                                                        Alan Tipi\r\n                                                    </InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"demo-multiple-checkbox-label\"\r\n                                                        id=\"demo-multiple-checkbox\"\r\n                                                        input={<OutlinedInput label=\"Alan Tipi\" />}\r\n                                                        name=\"type\"\r\n                                                        value={field.type}\r\n                                                        onChange={(e) =>\r\n                                                            handleInputChange(index, e)\r\n                                                        }\r\n                                                    >\r\n                                                        {fieldTypes.map((item, index) => {\r\n                                                            return (\r\n                                                                <MenuItem\r\n                                                                    key={index}\r\n                                                                    value={index}\r\n                                                                    className=\"\"\r\n                                                                >\r\n                                                                    {item.typeName}\r\n                                                                </MenuItem>\r\n                                                            )\r\n                                                        })}\r\n                                                    </Select>\r\n                                                    <FormHelperText>\r\n                                                        {field.typeError || null}\r\n                                                    </FormHelperText>\r\n                                                </FormControl>\r\n                                            </div>\r\n                                            <div className=\"col-md-2\">\r\n                                                <Tooltip title=\"Kullanıcıya gireceği değer hakkında örnek veri\">\r\n                                                    <TextField\r\n                                                        id=\"outlined-basic\"\r\n                                                        sx={{ width: '100%' }}\r\n                                                        label=\"İpucu\"\r\n                                                        variant=\"outlined\"\r\n                                                        name=\"placeholder\"\r\n                                                        type={placeholderType(field.type)}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                            </div>\r\n                                            <div className=\"col-md-2 d-flex justify-content-between\">\r\n                                                <TextField\r\n                                                    disabled={isMinMaxDisabled(field.type)}\r\n                                                    name=\"min\"\r\n                                                    className=\"mx-1\"\r\n                                                    label=\"Min\"\r\n                                                    type=\"number\"\r\n                                                    value={field.min}\r\n                                                    InputProps={{ inputProps: { min: 0 } }}\r\n                                                    error={field.minError}\r\n                                                    helperText={field.minError || null}\r\n                                                />\r\n                                                <TextField\r\n                                                    disabled={isMinMaxDisabled(field.type)}\r\n                                                    name=\"max\"\r\n                                                    className=\"mx-1\"\r\n                                                    label=\"Maks\"\r\n                                                    type=\"number\"\r\n                                                    value={field.max}\r\n                                                    InputProps={{ inputProps: { min: 0 } }}\r\n                                                    error={field.maxError}\r\n                                                    helperText={field.maxError || null}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            <div className=\"col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <FormControlLabel\r\n                                                        control={<Checkbox name=\"required\" />}\r\n                                                        label=\"Zorunlu alan\"\r\n                                                        value={field.required}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"col-md-1\">\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    onClick={() => {\r\n                                                        deleteFormField(index)\r\n                                                    }}\r\n                                                >\r\n                                                    <DeleteOutlined />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            )\r\n                        })}\r\n                        <div className=\"d-flex justify-content-center align-items-center mt-2\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    e.preventDefault()\r\n                                    submitForm()\r\n                                }}\r\n                            >\r\n                                Kaydet\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            ) : (\r\n                <div>Loading</div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormCreate\r\n","import { DataGrid, GridToolbarContainer } from '@mui/x-data-grid'\r\nimport React, { useEffect, useState } from 'react'\r\nimport {\r\n    DeleteFormDocuments,\r\n    GetForm,\r\n    GetFormDetails,\r\n    UpdateSelectedDocument,\r\n} from '../methods/DynamicForms'\r\nimport { Link, useNavigate, useParams } from 'react-router-dom'\r\nimport { Button } from '@mui/material'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { ArrowBack, EditOff, Edit } from '@mui/icons-material/'\r\nimport Swal from 'sweetalert2'\r\nimport useStore from '../store'\r\nimport { isExpired } from '../methods/Account'\r\nimport Tooltip from '@mui/material/Tooltip'\r\nimport { toast } from 'react-toastify'\r\nimport { GetUserDetails } from '../methods/GetUsers'\r\n\r\nconst FormTable = () => {\r\n    const { id } = useParams()\r\n    const [documents, setDocuments] = useState([])\r\n    const [formDetails, setFormDetails] = useState([])\r\n    const [columns, setColumns] = useState([])\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [selectionModel, setSelectionModel] = useState([])\r\n    const [isEditEnabled, setEditEnabled] = useState(false)\r\n    const [userDetail, setUserDetail] = useState()\r\n    const store = useStore()\r\n    const { toggleUpdate } = store\r\n    const { isUpdated } = store\r\n    const navigate = useNavigate()\r\n\r\n    const Toolbar = (props) => {\r\n        const handleClick = () => {\r\n            Swal.fire({\r\n                title: 'Emin misin?',\r\n                text: 'Seçilen formlar silinecektir!',\r\n                icon: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Sil',\r\n                cancelButtonText: 'Vazgeç',\r\n            }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                    DeleteFormDocuments(selectionModel, id)\r\n                        .then((response) => {\r\n                            if (response.deletedCount > 0) {\r\n                                Swal.fire({\r\n                                    icon: 'success',\r\n                                    title: 'Başarılı!',\r\n                                    text: response.deletedCount + ' adet form başarıyla silindi.',\r\n                                })\r\n                                toggleUpdate()\r\n                            }\r\n                        })\r\n                        .catch(() => {\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Silme işlemi geçersiz.',\r\n                            })\r\n                        })\r\n                }\r\n            })\r\n        }\r\n        const isAllowed = () => {\r\n            if (\r\n                userDetail.role === 'root' ||\r\n                userDetail.allowedForms.find((e) => e.formId === id).permissionType === 'write'\r\n            ) {\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n        return (\r\n            <GridToolbarContainer\r\n                className=\"d-flex justify-content-between\"\r\n                sx={{ backgroundColor: formDetails.primaryColor }}\r\n            >\r\n                <div className=\"row mt-3 mb-2 ms-1\">\r\n                    <h3 className=\"form-header text-white\">{formDetails.formName} Verileri</h3>\r\n                </div>\r\n                <div>\r\n                    <Tooltip title=\"Bu ayarı açtığınızda istediğiniz alana çift tıklayarak güncelleyebilirsiniz\">\r\n                        <button\r\n                            disabled={!isAllowed()}\r\n                            style={{\r\n                                marginLeft: '0.4rem',\r\n                            }}\r\n                            type=\"button\"\r\n                            onClick={() => setEditEnabled(!isEditEnabled)}\r\n                            id=\"sil\"\r\n                            className=\"btn bg-white btn-sm\"\r\n                        >\r\n                            {isEditEnabled ? (\r\n                                <EditOff htmlColor=\"orange\" />\r\n                            ) : (\r\n                                <Edit htmlColor=\"orange\" />\r\n                            )}\r\n                        </button>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Seçili satırları sil\">\r\n                        <button\r\n                            disabled={!isAllowed()}\r\n                            style={{\r\n                                marginLeft: '0.4rem',\r\n                            }}\r\n                            type=\"button\"\r\n                            onClick={handleClick}\r\n                            id=\"sil\"\r\n                            className=\"btn bg-white btn-sm\"\r\n                        >\r\n                            <Delete htmlColor=\"red\" />\r\n                        </button>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Geri Dön\">\r\n                        <Link\r\n                            style={{\r\n                                marginLeft: '0.4rem',\r\n                            }}\r\n                            to={'/dynamic/form-list'}\r\n                            id=\"backButton\"\r\n                            aria-pressed=\"true\"\r\n                            className=\"btn bg-white btn-sm me-2\"\r\n                        >\r\n                            <ArrowBack />\r\n                        </Link>\r\n                    </Tooltip>\r\n                </div>\r\n            </GridToolbarContainer>\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        isExpired()\r\n            .then((res) => {\r\n                if (res) {\r\n                    navigate('/dynamic')\r\n                }\r\n            })\r\n            .catch((error) => console.log(error))\r\n    }, [])\r\n    useEffect(() => {\r\n        GetFormDetails(id)\r\n            .then((res) => {\r\n                setFormDetails(res)\r\n                document.title = res.formName + ' Table'\r\n                document.getElementById(\r\n                    'favicon'\r\n                ).href = `${process.env.REACT_APP_API_URL}${res.icon}`\r\n                return res.formDetails\r\n            })\r\n            .then((details) => {\r\n                Object.keys(details).map((item) => {\r\n                    if (isLoading) {\r\n                        columns.push({\r\n                            field: item,\r\n                            headerName: details[item].htmlLabel,\r\n                            type: details[item].type.toLowerCase(),\r\n                            width: 200,\r\n                            editable: true,\r\n                        })\r\n                    }\r\n                })\r\n                GetUserDetails()\r\n                    .then((response) => {\r\n                        setUserDetail(response)\r\n                        console.log(response)\r\n                    })\r\n                    .then(() => {\r\n                        setLoading(false)\r\n                    })\r\n            })\r\n            .catch((err) => console.log(err))\r\n    }, [])\r\n    useEffect(() => {\r\n        GetForm(id)\r\n            .then((res) => {\r\n                setDocuments(res)\r\n            })\r\n            .catch((err) => console.log(err))\r\n    }, [isUpdated])\r\n\r\n    useEffect(() => {}, [])\r\n\r\n    return (\r\n        <div>\r\n            {!isLoading ? (\r\n                <div\r\n                    className=\"container\"\r\n                    style={{\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                        display: 'flex',\r\n                        height: '100vh',\r\n                    }}\r\n                >\r\n                    <DataGrid\r\n                        className=\"bg-white\"\r\n                        getRowId={(row) => row._id}\r\n                        rows={documents}\r\n                        autoHeight\r\n                        columns={columns}\r\n                        checkboxSelection\r\n                        aria-label=\"collapsible table\"\r\n                        hideFooterPagination\r\n                        editMode=\"row\"\r\n                        isCellEditable={() => isEditEnabled}\r\n                        onRowEditStop={(params) => {\r\n                            UpdateSelectedDocument(params.row, id)\r\n                                .then(() => {\r\n                                    toggleUpdate()\r\n                                    toast.success('Satır güncellendi.', {\r\n                                        position: 'bottom-center',\r\n                                    })\r\n                                })\r\n                                .catch(() => {\r\n                                    toggleUpdate()\r\n                                    toast.error('Güncellenemedi.', {\r\n                                        position: 'bottom-center',\r\n                                    })\r\n                                })\r\n                        }}\r\n                        components={{\r\n                            Toolbar: Toolbar,\r\n                        }}\r\n                        onSelectionModelChange={(newSelectionModel) => {\r\n                            setSelectionModel(newSelectionModel)\r\n                        }}\r\n                        selectionModel={selectionModel}\r\n                    />\r\n                </div>\r\n            ) : (\r\n                <div>Loading...</div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../UserCreate.css'\r\nimport camelcase from 'camelcase'\r\nimport useStore from '../store'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    IconButton,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Select,\r\n    TextField,\r\n    MenuItem,\r\n    FormHelperText,\r\n} from '@mui/material'\r\nimport { DeleteOutlined, Add, ArrowBack } from '@material-ui/icons'\r\nimport Tooltip from '@mui/material/Tooltip'\r\nimport { CreateForm, GetFormDetails, UpdateForm } from '../methods/DynamicForms'\r\nimport { getRole, isExpired } from '../methods/Account'\r\nimport { Link, useNavigate, useParams } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\nconst FormEdit = () => {\r\n    const { id } = useParams()\r\n    const [formFields, setFormFields] = useState([])\r\n    const [formName, setFormName] = useState()\r\n    const [selectedColor, setSelectedColor] = useState()\r\n    const [file, setFile] = useState()\r\n    const [formDescription, setFormDescription] = useState()\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [iconURL, setIconURL] = useState()\r\n    const store = useStore()\r\n    const { colors, fieldTypes, isUpdated, toggleUpdate } = store\r\n    const [errors, setErrors] = useState({\r\n        formName: { status: false, message: null },\r\n        selectedColor: { status: false, message: null },\r\n        file: { status: false, message: null },\r\n        formDescription: { status: false, message: null },\r\n    })\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        isExpired()\r\n            .then((res) => {\r\n                if (res) {\r\n                    navigate('/dynamic')\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error(error)\r\n            })\r\n    }, [])\r\n    const urlToObject = async (image) => {\r\n        const response = await fetch(process.env.REACT_APP_API_URL + image)\r\n        const blob = await response.blob()\r\n        const file = new File([blob], 'image.jpg', { type: blob.type })\r\n        setFile(file)\r\n        return file\r\n    }\r\n\r\n    useEffect(() => {\r\n        setFormFields([])\r\n        GetFormDetails(id)\r\n            .then((res) => {\r\n                setFormName(res.formName)\r\n                setFormDescription(res.description)\r\n                setSelectedColor(res.primaryColor)\r\n                setIconURL(res.icon)\r\n                document.title = res.formName\r\n                document.getElementById(\r\n                    'favicon'\r\n                ).href = `${process.env.REACT_APP_API_URL}${res.icon}`\r\n\r\n                Object.keys(res.formDetails).map((item, index) => {\r\n                    const formDetail = res.formDetails[item]\r\n                    formDetail.fieldName = item\r\n                    formDetail.type = fieldTypes.findIndex((item) => item.type === formDetail.type)\r\n                    setFormFields((formFields) => [...formFields, formDetail])\r\n                })\r\n            })\r\n            .then(() => {\r\n                setLoading(false)\r\n                setFile()\r\n            })\r\n            .catch((error) => console.log(error))\r\n    }, [isUpdated])\r\n\r\n    const deleteFormField = (index) => {\r\n        if (formFields.length > 1) {\r\n            setFormFields(formFields.filter((item) => formFields.indexOf(item) !== index))\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (index, event) => {\r\n        const updatedFormFields = [...formFields]\r\n\r\n        updatedFormFields[index][event.target.name] =\r\n            event.target.type === 'checkbox' ? event.target.checked : event.target.value\r\n        setFormFields(updatedFormFields)\r\n        console.log(formFields)\r\n        clearDynamicErrors(index, event)\r\n    }\r\n\r\n    const clearDynamicErrors = (index, event) => {\r\n        const updatedFormFields = [...formFields]\r\n        if (event.target.name === 'min' || event.target.name === 'max') {\r\n            updatedFormFields[index].minError = null\r\n            updatedFormFields[index].maxError = null\r\n        } else {\r\n            updatedFormFields[index][event.target.name + 'Error'] = null\r\n        }\r\n    }\r\n\r\n    const clearNormalErrors = (errorField) => {\r\n        const updatedErrors = errors\r\n        updatedErrors[errorField] = { status: false, message: null }\r\n    }\r\n\r\n    const checkValidation = () => {\r\n        let isValid = true\r\n        const updatedFormFields = [...formFields]\r\n        const updatedErrors = errors\r\n        if (!formName) {\r\n            updatedErrors.formName.status = true\r\n            updatedErrors.formName.message = 'Form Adı boş bırakılamaz'\r\n        }\r\n        if (!selectedColor) {\r\n            updatedErrors.selectedColor.status = true\r\n            updatedErrors.selectedColor.message = 'Bir Renk seçmelisiniz'\r\n        }\r\n\r\n        if (!formDescription) {\r\n            updatedErrors.formDescription.status = true\r\n            updatedErrors.formDescription.message = 'Form açıklaması boş bırakılamaz'\r\n        }\r\n\r\n        formFields.map((item, index) => {\r\n            if (!item.fieldName) {\r\n                updatedFormFields[index].fieldNameError = 'Alan adı boş bırakılamaz.'\r\n                isValid = false\r\n            }\r\n            if (!item.type && item.type !== 0) {\r\n                updatedFormFields[index].typeError = 'Alan tipini doldurmalısınız.'\r\n                isValid = false\r\n            }\r\n            if (item.min >= item.max) {\r\n                updatedFormFields[index].minError = 'Minimum değer maksimum değerden yüksek olamaz'\r\n                updatedFormFields[index].maxError = 'Minimum değer maksimum değerden yüksek olamaz'\r\n                isValid = false\r\n            }\r\n        })\r\n        setErrors(updatedErrors)\r\n        setFormFields(updatedFormFields)\r\n        if (formFields.length < 2) {\r\n            isValid = false\r\n            toast.error('En az 2 Alan ekleyiniz')\r\n        }\r\n        return isValid\r\n    }\r\n    console.log(iconURL)\r\n    const updateForm = async () => {\r\n        const isValid = checkValidation()\r\n        if (isValid) {\r\n            const formData = new FormData()\r\n            if (!file) setFile()\r\n            formData.append('file', file ? file : await urlToObject(iconURL))\r\n            console.log(file)\r\n            const formFieldDetails = {}\r\n            formFields.map((item) => {\r\n                const fieldNameCamelCased = camelcase(item.fieldName)\r\n\r\n                formFieldDetails[fieldNameCamelCased] = {\r\n                    type: fieldTypes[item.type].type,\r\n                    htmlLabel: item.fieldName,\r\n                    htmlType: fieldTypes[item.type].typeName,\r\n                    placeholder: item.placeholder,\r\n                }\r\n                if (item.required !== '')\r\n                    formFieldDetails[fieldNameCamelCased].required = item.required\r\n                if (item.max > item.min) {\r\n                    if (item.max && item.max > 0)\r\n                        formFieldDetails[fieldNameCamelCased].max = item.max\r\n                    if (item.min) formFieldDetails[fieldNameCamelCased].min = item.min\r\n                }\r\n            })\r\n            const formDetails = {\r\n                formName: formName,\r\n                description: formDescription,\r\n                primaryColor: selectedColor,\r\n            }\r\n            const formStructure = JSON.stringify([formFieldDetails, formDetails, { form_id: id }])\r\n            formData.append('formStructure', formStructure)\r\n            console.log(formStructure)\r\n            UpdateForm(formData)\r\n                .then((res) => {\r\n                    if (res) {\r\n                        toast.success('Form Güncellendi', { position: 'top-center' })\r\n                        toggleUpdate()\r\n                    }\r\n                })\r\n                .catch((err) => console.log(err))\r\n        }\r\n    }\r\n\r\n    const placeholderType = (type) => {\r\n        if (type) {\r\n            switch (fieldTypes[type].type) {\r\n                case 'String':\r\n                    return 'text'\r\n                case 'Number':\r\n                    return 'number'\r\n            }\r\n        }\r\n        return 'text'\r\n    }\r\n\r\n    const isMinMaxDisabled = (type) => {\r\n        if (type) {\r\n            switch (fieldTypes[type].type) {\r\n                case 'Date':\r\n                    return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"container justify-content-center align-items-center d-flex\"\r\n            style={{ height: '100vh' }}\r\n        >\r\n            {!isLoading ? (\r\n                <div\r\n                    className=\" rounded shadow-sm\"\r\n                    id=\"bodyColor\"\r\n                    style={{ backgroundColor: '#FFFFFF' }}\r\n                >\r\n                    <div\r\n                        style={{\r\n                            backgroundColor: selectedColor || '#4d4c4c',\r\n                            transition: '1s all',\r\n                        }}\r\n                    >\r\n                        <div className=\"row py-4 px-3\">\r\n                            <div className=\"form-group col-md-4\">\r\n                                <h3 className=\"form-header text-white\">Form Güncelle</h3>\r\n                                <p\r\n                                    className=\"form-subtitle text-white\"\r\n                                    style={{ textTransform: 'uppercase' }}\r\n                                >\r\n                                    {formName} TASARIMINI DÜZENLE\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div style={{ textAlign: 'right' }} className=\"form-group col-md-8\">\r\n                                <Tooltip title=\"Geri dön\">\r\n                                    <Link\r\n                                        style={{\r\n                                            marginLeft: '0.4rem',\r\n                                        }}\r\n                                        to={'/dynamic/form-list'}\r\n                                        id=\"backButton\"\r\n                                        aria-pressed=\"true\"\r\n                                        className=\"btn bg-white btn-sm me-2\"\r\n                                    >\r\n                                        <ArrowBack />\r\n                                    </Link>\r\n                                </Tooltip>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <form\r\n                        className=\"needs-validation py-4  px-3\"\r\n                        noValidate\r\n                        encType=\"multipart/formData\"\r\n                    >\r\n                        <div className=\"row align-items-center\">\r\n                            <div className=\"col-md-4\">\r\n                                <TextField\r\n                                    name=\"formName\"\r\n                                    value={formName}\r\n                                    id=\"outlined-basic\"\r\n                                    sx={{ width: '100%' }}\r\n                                    label=\"Formun Adı\"\r\n                                    variant=\"outlined\"\r\n                                    helperText={errors.formName.message}\r\n                                    error={errors.formName.status}\r\n                                    onChange={(e) => {\r\n                                        setFormName(e.target.value)\r\n                                        clearNormalErrors(e.target.name)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <FormControl\r\n                                    sx={{ width: 'auto', display: 'flex' }}\r\n                                    error={errors.selectedColor.status}\r\n                                >\r\n                                    <InputLabel id=\"demo-multiple-checkbox-label\">\r\n                                        Bir Renk Seçiniz\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        SelectDisplayProps={{\r\n                                            style: {\r\n                                                display: 'flex',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'space-between',\r\n                                            },\r\n                                        }}\r\n                                        labelId=\"demo-multiple-checkbox-label\"\r\n                                        id=\"demo-multiple-checkbox\"\r\n                                        input={<OutlinedInput label=\"Bir Renk Seçiniz\" />}\r\n                                        value={selectedColor || null}\r\n                                        sx={{ width: '100%' }}\r\n                                        name=\"selectedColor\"\r\n                                        onChange={(e) => {\r\n                                            setSelectedColor(e.target.value)\r\n                                            clearNormalErrors(e.target.name)\r\n                                        }}\r\n                                    >\r\n                                        {colors.map((item) => {\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    value={item.HEX}\r\n                                                    className=\"d-flex justify-content-between align-items-center\"\r\n                                                >\r\n                                                    <div>{item.color} </div>\r\n                                                    <div\r\n                                                        style={{\r\n                                                            height: '15px',\r\n                                                            width: '15px',\r\n                                                            backgroundColor: item.HEX,\r\n                                                            borderRadius: '50%',\r\n                                                            justifySelf: 'flex-end',\r\n                                                        }}\r\n                                                    ></div>\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })}\r\n                                    </Select>\r\n                                    <FormHelperText>\r\n                                        {errors.selectedColor.message || null}\r\n                                    </FormHelperText>\r\n                                </FormControl>\r\n                            </div>\r\n                            <div className=\"col-md-4 align-items-center d-flex justify-content-evenly\">\r\n                                <FormControl error={errors.file.status}>\r\n                                    <Button variant=\"contained\" component=\"label\">\r\n                                        Form İkonu Yükle\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            hidden\r\n                                            name=\"file\"\r\n                                            onChange={(e) => {\r\n                                                setFile(e.target.files[0])\r\n                                                clearNormalErrors(e.target.name)\r\n                                            }}\r\n                                        />\r\n                                    </Button>\r\n\r\n                                    <FormHelperText>{errors.file.message || null}</FormHelperText>\r\n                                </FormControl>\r\n                                {file && <label>{file.name}</label>}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"row align-items-center mx-1 mt-3\">\r\n                            <TextField\r\n                                label=\"Form Açıklaması\"\r\n                                multiline\r\n                                rows={2}\r\n                                maxRows={4}\r\n                                name=\"formDescription\"\r\n                                value={formDescription}\r\n                                onChange={(e) => {\r\n                                    setFormDescription(e.target.value)\r\n                                    clearNormalErrors(e.target.name)\r\n                                }}\r\n                                error={errors.formDescription.status}\r\n                                helperText={errors.formDescription.message}\r\n                            />\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-center align-items-center mt-2\">\r\n                            <IconButton\r\n                                onClick={() =>\r\n                                    setFormFields((formFields) => [...formFields, { id: uuid() }])\r\n                                }\r\n                            >\r\n                                <Tooltip title=\"Alan Ekle\">\r\n                                    <Add />\r\n                                </Tooltip>\r\n                            </IconButton>\r\n                        </div>\r\n                        {formFields.map((field, index) => {\r\n                            return (\r\n                                <form onChange={(e) => handleInputChange(index, e)} key={field.id}>\r\n                                    <div className=\"col mt-2 align-items-center\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-3\">\r\n                                                <TextField\r\n                                                    id=\"outlined-basic\"\r\n                                                    sx={{ width: '100%' }}\r\n                                                    label=\"Alan Adı\"\r\n                                                    variant=\"outlined\"\r\n                                                    name=\"fieldName\"\r\n                                                    value={field.fieldName}\r\n                                                    helperText={field.fieldNameError || null}\r\n                                                    error={field.fieldNameError}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"col-md-2\">\r\n                                                <FormControl\r\n                                                    sx={{ width: 'auto', display: 'flex' }}\r\n                                                    error={field.typeError}\r\n                                                >\r\n                                                    <InputLabel id=\"demo-multiple-checkbox-label\">\r\n                                                        Alan Tipi\r\n                                                    </InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"demo-multiple-checkbox-label\"\r\n                                                        id=\"demo-multiple-checkbox\"\r\n                                                        input={<OutlinedInput label=\"Alan Tipi\" />}\r\n                                                        name=\"type\"\r\n                                                        value={field.type}\r\n                                                        onChange={(e) =>\r\n                                                            handleInputChange(index, e)\r\n                                                        }\r\n                                                    >\r\n                                                        {fieldTypes.map((item, index) => {\r\n                                                            return (\r\n                                                                <MenuItem\r\n                                                                    key={index}\r\n                                                                    value={index}\r\n                                                                    className=\"\"\r\n                                                                >\r\n                                                                    {item.typeName}\r\n                                                                </MenuItem>\r\n                                                            )\r\n                                                        })}\r\n                                                    </Select>\r\n                                                    <FormHelperText>\r\n                                                        {field.typeError || null}\r\n                                                    </FormHelperText>\r\n                                                </FormControl>\r\n                                            </div>\r\n                                            <div className=\"col-md-2\">\r\n                                                <Tooltip title=\"Kullanıcıya gireceği değer hakkında örnek veri\">\r\n                                                    <TextField\r\n                                                        id=\"outlined-basic\"\r\n                                                        sx={{ width: '100%' }}\r\n                                                        label=\"İpucu\"\r\n                                                        variant=\"outlined\"\r\n                                                        name=\"placeholder\"\r\n                                                        value={field.placeholder || ''}\r\n                                                        type={placeholderType(field.type)}\r\n                                                    />\r\n                                                </Tooltip>\r\n                                            </div>\r\n                                            <div className=\"col-md-2 d-flex justify-content-between\">\r\n                                                <TextField\r\n                                                    disabled={isMinMaxDisabled(field.type)}\r\n                                                    name=\"min\"\r\n                                                    className=\"mx-1\"\r\n                                                    label=\"Min\"\r\n                                                    type=\"number\"\r\n                                                    value={field.min}\r\n                                                    InputProps={{ inputProps: { min: 0 } }}\r\n                                                    error={field.minError}\r\n                                                    helperText={field.minError || null}\r\n                                                />\r\n                                                <TextField\r\n                                                    disabled={isMinMaxDisabled(field.type)}\r\n                                                    name=\"max\"\r\n                                                    className=\"mx-1\"\r\n                                                    label=\"Maks\"\r\n                                                    type=\"number\"\r\n                                                    value={field.max}\r\n                                                    InputProps={{ inputProps: { min: 0 } }}\r\n                                                    error={field.maxError}\r\n                                                    helperText={field.maxError || null}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            <div className=\"col-md-2\">\r\n                                                <FormGroup>\r\n                                                    <FormControlLabel\r\n                                                        control={<Checkbox name=\"required\" />}\r\n                                                        label=\"Zorunlu alan\"\r\n                                                        value={field.required}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"col-md-1\">\r\n                                                <IconButton\r\n                                                    color=\"error\"\r\n                                                    onClick={() => {\r\n                                                        deleteFormField(index)\r\n                                                    }}\r\n                                                >\r\n                                                    <DeleteOutlined />\r\n                                                </IconButton>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                            )\r\n                        })}\r\n                        <div className=\"d-flex justify-content-center align-items-center mt-2\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    e.preventDefault()\r\n                                    updateForm()\r\n                                }}\r\n                            >\r\n                                Kaydet\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            ) : (\r\n                <div>Loading</div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormEdit\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport '../UserCreate.css'\r\nimport { GetFormDetails, submitFormDocument } from '../methods/DynamicForms'\r\nimport camelcase from 'camelcase'\r\nimport Swal from 'sweetalert2'\r\nimport useStore from '../store'\r\n\r\nconst FormView = () => {\r\n    const { id } = useParams()\r\n    const [formInfo, setFormInfo] = useState([])\r\n    const [formLabels, setFormLabels] = useState([])\r\n    const [values, setValues] = useState({})\r\n    const store = useStore()\r\n    const { toggleUpdate } = store\r\n\r\n    useEffect(() => {\r\n        GetFormDetails(id).then((res) => {\r\n            setFormLabels(res.formDetails)\r\n            setFormInfo(res)\r\n            document.title = res.formName\r\n            document.getElementById('favicon').href = `${process.env.REACT_APP_API_URL}${res.icon}`\r\n        })\r\n    }, [])\r\n\r\n    const handleInputChange = (event) => {\r\n        const updatedValues = values\r\n        updatedValues[event.target.name] = event.target.value\r\n        setValues(updatedValues)\r\n    }\r\n\r\n    const submitForm = () => {\r\n        values.form_id = id\r\n        submitFormDocument(values)\r\n            .then((res) => {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: 'Başarılı!',\r\n                    text: 'Kaydedildi.',\r\n                })\r\n                toggleUpdate()\r\n            })\r\n            .catch((err) =>\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Bir hata oluştu.',\r\n                    text: 'Lütfen girdiğiniz bilgileri gözden geçirin.',\r\n                })\r\n            )\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"form-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"form-holder\">\r\n                        <div className=\"form-content\">\r\n                            <div className=\"form-items\" style={{ padding: '0' }}>\r\n                                <div\r\n                                    className=\"card-header dynamic-form-title\"\r\n                                    style={{ background: formInfo.primaryColor }}\r\n                                >\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group col-md-12\">\r\n                                            <h3 style={{ color: 'white' }}>{formInfo.formName}</h3>\r\n                                            <p\r\n                                                style={{\r\n                                                    textTransform: 'uppercase',\r\n                                                    color: 'white',\r\n                                                }}\r\n                                            >\r\n                                                {formInfo.description}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div\r\n                                    className=\"card-body dynamic-form-body\"\r\n                                    onChange={(e) => handleInputChange(e)}\r\n                                >\r\n                                    <form encType=\"multipart/form-data\">\r\n                                        <div className=\"row\">\r\n                                            {Object.entries(formLabels).map(([label, index]) => {\r\n                                                return (\r\n                                                    <div className=\"form-group col-md-6 col-sm-12 col-12 mt-4\">\r\n                                                        <label htmlFor=\"fullname\">{label}</label>\r\n                                                        <input\r\n                                                            type={index.type}\r\n                                                            className=\"form-control mt-2\"\r\n                                                            id={label}\r\n                                                            name={label}\r\n                                                            placeholder={index.placeholder}\r\n                                                        />\r\n                                                    </div>\r\n                                                )\r\n                                            })}\r\n                                        </div>\r\n                                        <div\r\n                                            style={{\r\n                                                textAlign: 'center',\r\n                                                color: formInfo.primaryColor,\r\n                                            }}\r\n                                            className=\"form-button mt-4\"\r\n                                        >\r\n                                            <button\r\n                                                id=\"submit\"\r\n                                                type=\"submit\"\r\n                                                className=\"btn mt-4\"\r\n                                                style={{ backgroundColor: formInfo.primaryColor }}\r\n                                                onClick={(e) => {\r\n                                                    e.preventDefault()\r\n                                                    submitForm()\r\n                                                }}\r\n                                            >\r\n                                                Kaydet\r\n                                            </button>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormView\r\n","import './App.css'\r\nimport {\r\n    BrowserRouter,\r\n    Routes,\r\n    Route,\r\n    // Link\r\n} from 'react-router-dom'\r\nimport React from 'react'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport UserCreate from './components/UserCreate'\r\nimport LoginPage from './components/LoginPage'\r\nimport UserTable from './components/UserTable'\r\nimport FormList from './Pages/FormList'\r\nimport DynamicLoginPage from './Pages/DynamicLoginPage'\r\nimport CreateAdmin from './Pages/CreateAdmin'\r\nimport FormCreate from './Pages/FormCreate'\r\nimport FormTable from './Pages/FormTable'\r\nimport FormEdit from './Pages/FormEdit'\r\nimport FormView from './Pages/FormView'\r\n\r\nconst App = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={500}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n            <Routes>\r\n                <Route path=\"/\">\r\n                    <Route index element={<UserCreate />} />\r\n                    <Route path=\"login\" element={<LoginPage />} />\r\n                    <Route path=\"users\" element={<UserTable />} />\r\n                </Route>\r\n                <Route path=\"/dynamic\">\r\n                    <Route index element={<DynamicLoginPage />} />\r\n                    <Route path=\"create-admin\" element={<CreateAdmin />} />\r\n                    <Route path=\"form-create\" element={<FormCreate />} />\r\n                    <Route path=\"form-list\" element={<FormList />} />\r\n                    <Route path=\"form-table/:id\" element={<FormTable />} />\r\n                    <Route path=\"form-edit/:id\" element={<FormEdit />} />\r\n                    <Route path=\"form/:id\" element={<FormView />} />\r\n                </Route>\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}